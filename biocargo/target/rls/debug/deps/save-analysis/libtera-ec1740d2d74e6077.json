{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20","program":"/home/deltalab/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","tera","/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=ec1740d2d74e6077","-C","extra-filename=-ec1740d2d74e6077","--out-dir","/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps","-L","dependency=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps","--extern","chrono=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libchrono-ac7adf220fb2eeba.rmeta","--extern","error_chain=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/liberror_chain-7837bd536330d431.rmeta","--extern","glob=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libglob-ca4ed36fb909de11.rmeta","--extern","humansize=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libhumansize-bd6ba43a0a545970.rmeta","--extern","lazy_static=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/liblazy_static-df97b860f7a76404.rmeta","--extern","pest=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libpest-b6c375a32ed0c590.rmeta","--extern","pest_derive=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libpest_derive-6f28d6ff2498dd80.so","--extern","regex=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libregex-5cf0030037e69880.rmeta","--extern","serde=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libserde-51be562b67e2a38c.rmeta","--extern","serde_json=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libserde_json-877637c5b47aeb59.rmeta","--extern","slug=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libslug-d65872f4ad174a2d.rmeta","--extern","unic_segment=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libunic_segment-39657bdc1ca4f685.rmeta","--extern","url=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/liburl-a28d5b2fad120821.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/deltalab/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libtera-ec1740d2d74e6077.rmeta"},"prelude":{"crate_id":{"name":"tera","disambiguator":[14097407515273313230,5552885231738870024]},"crate_root":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src","external_crates":[{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16444769200449299423,17751526912405478841]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4150165762619742282,10084428854705346699]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17154149902455954331,10787439630250540476]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3551889228217061522,18098948565341830907]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[616005194320102788,15921775685612583979]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16641574387685737100,7292927880071586320]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10423320894468080309,10477758161385623276]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15680994173287911211,8587509387955096358]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6787535578940220623,17568269130839787030]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17594861313346837805,7275947389262704147]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11399954785695891892,14851098529173350963]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[12494985972155115308,9730871930189483612]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15532488949252110002,6117296861090759943]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[1804911290426314532,6689449841577915250]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[8479710970850627223,6852362994577870122]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[12659285667184348883,16807697831197910537]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[12098761462721718681,17445864288247971786]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":18,"id":{"name":"glob","disambiguator":[4332180706423268941,13141357256278310892]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":19,"id":{"name":"pest","disambiguator":[5981339842237046810,10057667776952144622]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":20,"id":{"name":"ucd_trie","disambiguator":[1967989939201429649,5068828394236889682]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":21,"id":{"name":"serde","disambiguator":[713128385443853103,11503563558134176911]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":22,"id":{"name":"serde_derive","disambiguator":[11073430573536296121,4182312938554704757]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":23,"id":{"name":"serde_json","disambiguator":[16036837523406572470,2291252538426986831]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":24,"id":{"name":"itoa","disambiguator":[5827534888009080677,11614279584279191322]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":25,"id":{"name":"ryu","disambiguator":[243203925618099413,3389529715582989529]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":26,"id":{"name":"pest_derive","disambiguator":[758073838335060953,7492842720121395285]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":27,"id":{"name":"error_chain","disambiguator":[12446410171536354434,10157802585686566627]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":28,"id":{"name":"backtrace","disambiguator":[7447178611308571175,12019305550613846289]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":29,"id":{"name":"rustc_demangle","disambiguator":[4202382735828077315,18351455814441160339]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":30,"id":{"name":"cfg_if","disambiguator":[3051334588151808042,8832791441195491324]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":31,"id":{"name":"addr2line","disambiguator":[6720221923401979334,7689519721003415452]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":32,"id":{"name":"gimli","disambiguator":[4636216499994787984,16164250305038557359]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":33,"id":{"name":"libc","disambiguator":[9383062654612468226,7217645802027231275]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":34,"id":{"name":"object","disambiguator":[3001962467683330235,8451680781716425950]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":35,"id":{"name":"miniz_oxide","disambiguator":[2571020903233065250,14759835531340577473]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":36,"id":{"name":"adler","disambiguator":[10146648273030989063,70283989958103973]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":37,"id":{"name":"regex","disambiguator":[14166531857016490891,15612363591742464284]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":38,"id":{"name":"aho_corasick","disambiguator":[2911195114012988848,11542241028458176]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":39,"id":{"name":"memchr","disambiguator":[8020156463476238044,5759756836602401772]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":40,"id":{"name":"regex_syntax","disambiguator":[9667971601752025516,7682348306761504352]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":41,"id":{"name":"thread_local","disambiguator":[15277858337445908306,1035666566947795679]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":42,"id":{"name":"once_cell","disambiguator":[16151784159935003292,2121646449191858216]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":43,"id":{"name":"slug","disambiguator":[7288221768675727711,3362069555613573513]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":44,"id":{"name":"deunicode","disambiguator":[136423822808220519,7184518349002763019]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":45,"id":{"name":"lazy_static","disambiguator":[15466199229247140558,14835071783094180148]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":46,"id":{"name":"chrono","disambiguator":[5429399122339857828,14287250571673379661]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":47,"id":{"name":"time","disambiguator":[7542639649270055177,2444490024087727886]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":48,"id":{"name":"num_integer","disambiguator":[9895017762654667313,13528627114746164437]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":49,"id":{"name":"num_traits","disambiguator":[10285195072970654542,14886035359600786263]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":50,"id":{"name":"humansize","disambiguator":[13909410360507349042,3511777855713411491]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":51,"id":{"name":"url","disambiguator":[13137922643329341794,278278329131731976]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":52,"id":{"name":"matches","disambiguator":[10983431955134428655,18252988190643775964]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":53,"id":{"name":"idna","disambiguator":[18064252094651532450,9458550055981306218]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":54,"id":{"name":"unicode_bidi","disambiguator":[18010076164831834647,511576938493374529]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":55,"id":{"name":"unicode_normalization","disambiguator":[2097439144954773161,12609065709725134403]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":56,"id":{"name":"tinyvec","disambiguator":[15410115440991091503,8457490752332437060]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":57,"id":{"name":"tinyvec_macros","disambiguator":[4635075534758940844,7009870818406730190]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":58,"id":{"name":"percent_encoding","disambiguator":[16563982165707691063,992381479590888894]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":59,"id":{"name":"unic_segment","disambiguator":[10858625847277137361,7608231375346669555]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":60,"id":{"name":"unic_ucd_segment","disambiguator":[13886172372643658229,12560756265361082432]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":61,"id":{"name":"unic_char_property","disambiguator":[4289130501732457943,4003424052354220006]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":62,"id":{"name":"unic_char_range","disambiguator":[9912203379220226979,14244668770074356807]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":63,"id":{"name":"unic_ucd_version","disambiguator":[10969464922499600391,13179520886208194387]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","num":64,"id":{"name":"unic_common","disambiguator":[14767140665566241569,9681423043299843281]}}],"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":0,"byte_end":1653,"line_start":1,"line_end":66,"column_start":1,"column_end":21}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":125},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1082,"byte_end":1090,"line_start":50,"line_end":50,"column_start":28,"column_end":36},"alias_span":null,"name":"FilterFn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1121,"byte_end":1129,"line_start":51,"line_end":51,"column_start":30,"column_end":38},"alias_span":null,"name":"GlobalFn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1158,"byte_end":1166,"line_start":52,"line_end":52,"column_start":28,"column_end":36},"alias_span":null,"name":"TesterFn","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":657},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1185,"byte_end":1192,"line_start":53,"line_end":53,"column_start":18,"column_end":25},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":734},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1211,"byte_end":1216,"line_start":54,"line_end":54,"column_start":18,"column_end":23},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":735},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1211,"byte_end":1216,"line_start":54,"line_end":54,"column_start":18,"column_end":23},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":617}},{"kind":"Use","ref_id":{"krate":0,"index":742},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1218,"byte_end":1227,"line_start":54,"line_end":54,"column_start":25,"column_end":34},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":667},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1229,"byte_end":1235,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1713},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1369,"byte_end":1379,"line_start":57,"line_end":57,"column_start":29,"column_end":39},"alias_span":null,"name":"from_value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":1711},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1381,"byte_end":1389,"line_start":57,"line_end":57,"column_start":41,"column_end":49},"alias_span":null,"name":"to_value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":492},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1391,"byte_end":1394,"line_start":57,"line_end":57,"column_start":51,"column_end":54},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":2780},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1396,"byte_end":1402,"line_start":57,"line_end":57,"column_start":56,"column_end":62},"alias_span":null,"name":"Number","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":23,"index":2203},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1404,"byte_end":1409,"line_start":57,"line_end":57,"column_start":64,"column_end":69},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2448},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1445,"byte_end":1453,"line_start":59,"line_end":59,"column_start":19,"column_end":27},"alias_span":null,"name":"Template","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":550},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1469,"byte_end":1473,"line_start":60,"line_end":60,"column_start":15,"column_end":19},"alias_span":null,"name":"Tera","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":611},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1490,"byte_end":1501,"line_start":61,"line_end":61,"column_start":16,"column_end":27},"alias_span":null,"name":"escape_html","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":1649,"byte_end":1652,"line_start":66,"line_end":66,"column_start":17,"column_end":20},"alias_span":null,"name":"ast","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":0,"byte_end":1653,"line_start":1,"line_end":66,"column_start":1,"column_end":21},"name":"","qualname":"::","value":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":167},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":276},{"krate":0,"index":466},{"krate":0,"index":508},{"krate":0,"index":521},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":2785},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629}],"decl_id":null,"docs":" # Tera\n Tera is a template engine based on [Jinja2](http://jinja.pocoo.org/)\n and the [Django template language](https://docs.djangoproject.com/en/1.9/topics/templates/).","sig":null,"attributes":[{"value":"/ # Tera","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":54,"byte_end":64,"line_start":3,"line_end":3,"column_start":1,"column_end":11}},{"value":"/ Tera is a template engine based on [Jinja2](http://jinja.pocoo.org/)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":65,"byte_end":137,"line_start":4,"line_end":4,"column_start":1,"column_end":73}},{"value":"/ and the [Django template language](https://docs.djangoproject.com/en/1.9/topics/templates/).","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":138,"byte_end":234,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":235,"byte_end":238,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See the [site](https://tera.netlify.com) for features and to get started.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":239,"byte_end":316,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"deny(missing_docs)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/lib.rs","byte_start":318,"byte_end":340,"line_start":9,"line_end":9,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":125},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/filters/mod.rs","byte_start":3718,"byte_end":3726,"line_start":13,"line_end":13,"column_start":10,"column_end":18},"name":"FilterFn","qualname":"::builtins::filters::FilterFn","value":"fn(: Value, : HashMap<String, Value>) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" The filter function type definition\n","sig":null,"attributes":[{"value":"/ The filter function type definition","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/filters/mod.rs","byte_start":3669,"byte_end":3708,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":134},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/functions.rs","byte_start":52877,"byte_end":52885,"line_start":9,"line_end":9,"column_start":10,"column_end":18},"name":"GlobalFn","qualname":"::builtins::functions::GlobalFn","value":"Box<Fn(HashMap<String, Value>) -> Result<Value> + Sync + Send>","parent":null,"children":[],"decl_id":null,"docs":" The global function type definition\n","sig":null,"attributes":[{"value":"/ The global function type definition","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/functions.rs","byte_start":52828,"byte_end":52867,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":146},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/testers.rs","byte_start":58901,"byte_end":58909,"line_start":7,"line_end":7,"column_start":10,"column_end":18},"name":"TesterFn","qualname":"::builtins::testers::TesterFn","value":"fn(: Option<Value>, : Vec<Value>) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" The tester function type definition\n","sig":null,"attributes":[{"value":"/ The tester function type definition","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/testers.rs","byte_start":58852,"byte_end":58891,"line_start":6,"line_end":6,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":657},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69251,"byte_end":69258,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"Context","qualname":"::context::Context","value":"Context {  }","parent":null,"children":[{"krate":0,"index":658}],"decl_id":null,"docs":" The struct that holds the context of a template rendering.","sig":null,"attributes":[{"value":"/ The struct that holds the context of a template rendering.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69051,"byte_end":69113,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69114,"byte_end":69117,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Light wrapper around a `BTreeMap` for easier insertions of Serializable","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69118,"byte_end":69193,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ values","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69194,"byte_end":69204,"line_start":13,"line_end":13,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69362,"byte_end":69365,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"pub fn new() -> Context","parent":null,"children":[],"decl_id":null,"docs":" Initializes an empty context\n","sig":null,"attributes":[{"value":"/ Initializes an empty context","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69318,"byte_end":69350,"line_start":20,"line_end":20,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69591,"byte_end":69594,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"add","qualname":"<Context>::add","value":"pub fn add<T: Serialize + ?Sized>(&mut Self, &str, &T)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.11.15\", note =\n             \"Use `insert` instead to keep consistency with std collections\")","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69453,"byte_end":69579,"line_start":26,"line_end":29,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70011,"byte_end":70017,"line_start":41,"line_end":41,"column_start":12,"column_end":18},"name":"insert","qualname":"<Context>::insert","value":"pub fn insert<T: Serialize + ?Sized>(&mut Self, &str, &T)","parent":null,"children":[],"decl_id":null,"docs":" Converts the `val` parameter to `Value` and insert it into the context","sig":null,"attributes":[{"value":"/ Converts the `val` parameter to `Value` and insert it into the context","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69728,"byte_end":69802,"line_start":34,"line_end":34,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69807,"byte_end":69810,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69815,"byte_end":69833,"line_start":36,"line_end":36,"column_start":5,"column_end":23}},{"value":"/ let mut context = Context::new();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69838,"byte_end":69875,"line_start":37,"line_end":37,"column_start":5,"column_end":42}},{"value":"/ // user is an instance of a struct implementing `Serialize`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69880,"byte_end":69943,"line_start":38,"line_end":38,"column_start":5,"column_end":68}},{"value":"/ context.insert(\"number_users\", 42);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69948,"byte_end":69987,"line_start":39,"line_end":39,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69992,"byte_end":69999,"line_start":40,"line_end":40,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70177,"byte_end":70184,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"as_json","qualname":"<Context>::as_json","value":"pub fn as_json(&Self) -> TeraResult<Value>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70722,"byte_end":70728,"line_start":62,"line_end":62,"column_start":12,"column_end":18},"name":"extend","qualname":"<Context>::extend","value":"pub fn extend(&mut Self, Context)","parent":null,"children":[],"decl_id":null,"docs":" Appends the data of the `source` parameter to `self`, overwriting existing keys.\n The source context will be dropped.","sig":null,"attributes":[{"value":"/ Appends the data of the `source` parameter to `self`, overwriting existing keys.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70302,"byte_end":70386,"line_start":50,"line_end":50,"column_start":5,"column_end":89}},{"value":"/ The source context will be dropped.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70391,"byte_end":70430,"line_start":51,"line_end":51,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70435,"byte_end":70438,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70443,"byte_end":70461,"line_start":53,"line_end":53,"column_start":5,"column_end":23}},{"value":"/ let mut target = Context::new();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70466,"byte_end":70502,"line_start":54,"line_end":54,"column_start":5,"column_end":41}},{"value":"/ target.insert(\"a\", 1);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70507,"byte_end":70533,"line_start":55,"line_end":55,"column_start":5,"column_end":31}},{"value":"/ target.insert(\"b\", 2);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70538,"byte_end":70564,"line_start":56,"line_end":56,"column_start":5,"column_end":31}},{"value":"/ let mut source = Context::new();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70569,"byte_end":70605,"line_start":57,"line_end":57,"column_start":5,"column_end":41}},{"value":"/ source.insert(\"b\", 3);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70610,"byte_end":70636,"line_start":58,"line_end":58,"column_start":5,"column_end":31}},{"value":"/ source.insert(\"d\", 4);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70641,"byte_end":70667,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/ target.extend(source);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70672,"byte_end":70698,"line_start":60,"line_end":60,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70703,"byte_end":70710,"line_start":61,"line_end":61,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":217},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ast","qualname":"::parser::ast","value":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":1946},{"krate":0,"index":1956},{"krate":0,"index":1955},{"krate":0,"index":1953},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":220},{"krate":0,"index":1958},{"krate":0,"index":1976},{"krate":0,"index":1974},{"krate":0,"index":1972},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":222},{"krate":0,"index":1977},{"krate":0,"index":2001},{"krate":0,"index":1999},{"krate":0,"index":1997},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":224},{"krate":0,"index":2002},{"krate":0,"index":2011},{"krate":0,"index":2009},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2013},{"krate":0,"index":2023},{"krate":0,"index":2021},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2025},{"krate":0,"index":2035},{"krate":0,"index":2033},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2037},{"krate":0,"index":2045},{"krate":0,"index":2043},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2047},{"krate":0,"index":2090},{"krate":0,"index":2088},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2092},{"krate":0,"index":2102},{"krate":0,"index":2100},{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":226},{"krate":0,"index":2104},{"krate":0,"index":2114},{"krate":0,"index":2112},{"krate":0,"index":2108},{"krate":0,"index":2109},{"krate":0,"index":2116},{"krate":0,"index":2125},{"krate":0,"index":2123},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2127},{"krate":0,"index":2137},{"krate":0,"index":2135},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2139},{"krate":0,"index":2149},{"krate":0,"index":2147},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2151},{"krate":0,"index":2161},{"krate":0,"index":2159},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2163},{"krate":0,"index":2172},{"krate":0,"index":2170},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2174},{"krate":0,"index":2185},{"krate":0,"index":2183},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2187},{"krate":0,"index":2196},{"krate":0,"index":2194},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2198},{"krate":0,"index":2265},{"krate":0,"index":2263},{"krate":0,"index":2259},{"krate":0,"index":2260}],"decl_id":null,"docs":" The AST of Tera\n","sig":null,"attributes":[{"value":"/ The AST of Tera","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/mod.rs","byte_start":74466,"byte_end":74485,"line_start":17,"line_end":17,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1946},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":112977,"byte_end":112979,"line_start":6,"line_end":6,"column_start":12,"column_end":14},"name":"WS","qualname":"::parser::ast::WS","value":"WS { left, right }","parent":null,"children":[{"krate":0,"index":1947},{"krate":0,"index":1948}],"decl_id":null,"docs":" Whether to remove the whitespace of a `{% %}` tag\n","sig":null,"attributes":[{"value":"/ Whether to remove the whitespace of a `{% %}` tag","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":112871,"byte_end":112924,"line_start":4,"line_end":4,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113025,"byte_end":113029,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"left","qualname":"::parser::ast::WS::left","value":"bool","parent":{"krate":0,"index":1946},"children":[],"decl_id":null,"docs":" `true` if the tag is `{%-`\n","sig":null,"attributes":[{"value":"/ `true` if the tag is `{%-`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":112986,"byte_end":113016,"line_start":7,"line_end":7,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":1948},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113080,"byte_end":113085,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"name":"right","qualname":"::parser::ast::WS::right","value":"bool","parent":{"krate":0,"index":1946},"children":[],"decl_id":null,"docs":" `true` if the tag is `-%}`\n","sig":null,"attributes":[{"value":"/ `true` if the tag is `-%}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113041,"byte_end":113071,"line_start":9,"line_end":9,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1959},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113297,"byte_end":113300,"line_start":23,"line_end":23,"column_start":5,"column_end":8},"name":"Add","qualname":"::parser::ast::MathOperator::Add","value":"MathOperator::Add","parent":{"krate":0,"index":1958},"children":[],"decl_id":null,"docs":" +\n","sig":null,"attributes":[{"value":"/ +","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113287,"byte_end":113292,"line_start":22,"line_end":22,"column_start":5,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1961},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113316,"byte_end":113319,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Sub","qualname":"::parser::ast::MathOperator::Sub","value":"MathOperator::Sub","parent":{"krate":0,"index":1958},"children":[],"decl_id":null,"docs":" -\n","sig":null,"attributes":[{"value":"/ -","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113306,"byte_end":113311,"line_start":24,"line_end":24,"column_start":5,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1963},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113335,"byte_end":113338,"line_start":27,"line_end":27,"column_start":5,"column_end":8},"name":"Mul","qualname":"::parser::ast::MathOperator::Mul","value":"MathOperator::Mul","parent":{"krate":0,"index":1958},"children":[],"decl_id":null,"docs":" *\n","sig":null,"attributes":[{"value":"/ *","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113325,"byte_end":113330,"line_start":26,"line_end":26,"column_start":5,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1965},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113354,"byte_end":113357,"line_start":29,"line_end":29,"column_start":5,"column_end":8},"name":"Div","qualname":"::parser::ast::MathOperator::Div","value":"MathOperator::Div","parent":{"krate":0,"index":1958},"children":[],"decl_id":null,"docs":" /\n","sig":null,"attributes":[{"value":"/ /","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113344,"byte_end":113349,"line_start":28,"line_end":28,"column_start":5,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1967},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113373,"byte_end":113379,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"Modulo","qualname":"::parser::ast::MathOperator::Modulo","value":"MathOperator::Modulo","parent":{"krate":0,"index":1958},"children":[],"decl_id":null,"docs":" %\n","sig":null,"attributes":[{"value":"/ %","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113363,"byte_end":113368,"line_start":30,"line_end":30,"column_start":5,"column_end":10}}]},{"kind":"Enum","id":{"krate":0,"index":1958},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113268,"byte_end":113280,"line_start":21,"line_end":21,"column_start":10,"column_end":22},"name":"MathOperator","qualname":"::parser::ast::MathOperator","value":"pub enum MathOperator {\n\n    /// +\n    Add,\n\n    /// -\n    Sub,\n\n    /// *\n    Mul,\n\n    /// /\n    Div,\n\n    /// %\n    Modulo,\n}","parent":null,"children":[{"krate":0,"index":1959},{"krate":0,"index":1961},{"krate":0,"index":1963},{"krate":0,"index":1965},{"krate":0,"index":1967}],"decl_id":null,"docs":" All math operators\n","sig":null,"attributes":[{"value":"/ All math operators","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113195,"byte_end":113217,"line_start":19,"line_end":19,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1978},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113905,"byte_end":113907,"line_start":54,"line_end":54,"column_start":5,"column_end":7},"name":"Gt","qualname":"::parser::ast::LogicOperator::Gt","value":"LogicOperator::Gt","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" >\n","sig":null,"attributes":[{"value":"/ >","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113895,"byte_end":113900,"line_start":53,"line_end":53,"column_start":5,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1980},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113924,"byte_end":113927,"line_start":56,"line_end":56,"column_start":5,"column_end":8},"name":"Gte","qualname":"::parser::ast::LogicOperator::Gte","value":"LogicOperator::Gte","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" >=\n","sig":null,"attributes":[{"value":"/ >=","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113913,"byte_end":113919,"line_start":55,"line_end":55,"column_start":5,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1982},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113943,"byte_end":113945,"line_start":58,"line_end":58,"column_start":5,"column_end":7},"name":"Lt","qualname":"::parser::ast::LogicOperator::Lt","value":"LogicOperator::Lt","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" <\n","sig":null,"attributes":[{"value":"/ <","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113933,"byte_end":113938,"line_start":57,"line_end":57,"column_start":5,"column_end":10}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1984},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113962,"byte_end":113965,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"name":"Lte","qualname":"::parser::ast::LogicOperator::Lte","value":"LogicOperator::Lte","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" <=\n","sig":null,"attributes":[{"value":"/ <=","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113951,"byte_end":113957,"line_start":59,"line_end":59,"column_start":5,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1986},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113982,"byte_end":113984,"line_start":62,"line_end":62,"column_start":5,"column_end":7},"name":"Eq","qualname":"::parser::ast::LogicOperator::Eq","value":"LogicOperator::Eq","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" ==\n","sig":null,"attributes":[{"value":"/ ==","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113971,"byte_end":113977,"line_start":61,"line_end":61,"column_start":5,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1988},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114001,"byte_end":114006,"line_start":64,"line_end":64,"column_start":5,"column_end":10},"name":"NotEq","qualname":"::parser::ast::LogicOperator::NotEq","value":"LogicOperator::NotEq","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" !=\n","sig":null,"attributes":[{"value":"/ !=","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113990,"byte_end":113996,"line_start":63,"line_end":63,"column_start":5,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1990},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114024,"byte_end":114027,"line_start":66,"line_end":66,"column_start":5,"column_end":8},"name":"And","qualname":"::parser::ast::LogicOperator::And","value":"LogicOperator::And","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" and\n","sig":null,"attributes":[{"value":"/ and","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114012,"byte_end":114019,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1992},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114044,"byte_end":114046,"line_start":68,"line_end":68,"column_start":5,"column_end":7},"name":"Or","qualname":"::parser::ast::LogicOperator::Or","value":"LogicOperator::Or","parent":{"krate":0,"index":1977},"children":[],"decl_id":null,"docs":" or\n","sig":null,"attributes":[{"value":"/ or","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114033,"byte_end":114039,"line_start":67,"line_end":67,"column_start":5,"column_end":11}}]},{"kind":"Enum","id":{"krate":0,"index":1977},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113875,"byte_end":113888,"line_start":52,"line_end":52,"column_start":10,"column_end":23},"name":"LogicOperator","qualname":"::parser::ast::LogicOperator","value":"pub enum LogicOperator {\n\n    /// >\n    Gt,\n\n    /// >=\n    Gte,\n\n    /// <\n    Lt,\n\n    /// <=\n    Lte,\n\n    /// ==\n    Eq,\n\n    /// !=\n    NotEq,\n\n    /// and\n    And,\n\n    /// or\n    Or,\n}","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":1980},{"krate":0,"index":1982},{"krate":0,"index":1984},{"krate":0,"index":1986},{"krate":0,"index":1988},{"krate":0,"index":1990},{"krate":0,"index":1992}],"decl_id":null,"docs":" All logic operators\n","sig":null,"attributes":[{"value":"/ All logic operators","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113801,"byte_end":113824,"line_start":50,"line_end":50,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":2002},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114709,"byte_end":114721,"line_start":92,"line_end":92,"column_start":12,"column_end":24},"name":"FunctionCall","qualname":"::parser::ast::FunctionCall","value":"FunctionCall { name, args }","parent":null,"children":[{"krate":0,"index":2003},{"krate":0,"index":2004}],"decl_id":null,"docs":" A function call, can be a filter or a global function\n","sig":null,"attributes":[{"value":"/ A function call, can be a filter or a global function","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114605,"byte_end":114662,"line_start":90,"line_end":90,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2003},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114765,"byte_end":114769,"line_start":94,"line_end":94,"column_start":9,"column_end":13},"name":"name","qualname":"::parser::ast::FunctionCall::name","value":"std::string::String","parent":{"krate":0,"index":2002},"children":[],"decl_id":null,"docs":" The name of the function\n","sig":null,"attributes":[{"value":"/ The name of the function","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114728,"byte_end":114756,"line_start":93,"line_end":93,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2004},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114834,"byte_end":114838,"line_start":96,"line_end":96,"column_start":9,"column_end":13},"name":"args","qualname":"::parser::ast::FunctionCall::args","value":"std::collections::HashMap<std::string::String, parser::ast::Expr>","parent":{"krate":0,"index":2002},"children":[],"decl_id":null,"docs":" The args of the function: key -> value\n","sig":null,"attributes":[{"value":"/ The args of the function: key -> value","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114783,"byte_end":114825,"line_start":95,"line_end":95,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2013},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114942,"byte_end":114950,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"MathExpr","qualname":"::parser::ast::MathExpr","value":"MathExpr { lhs, rhs, operator }","parent":null,"children":[{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016}],"decl_id":null,"docs":" A mathematical expression\n","sig":null,"attributes":[{"value":"/ A mathematical expression","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114866,"byte_end":114895,"line_start":99,"line_end":99,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2014},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115006,"byte_end":115009,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"name":"lhs","qualname":"::parser::ast::MathExpr::lhs","value":"std::boxed::Box<parser::ast::Expr>","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" The left hand side of the expression\n","sig":null,"attributes":[{"value":"/ The left hand side of the expression","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114957,"byte_end":114997,"line_start":102,"line_end":102,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2015},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115076,"byte_end":115079,"line_start":105,"line_end":105,"column_start":9,"column_end":12},"name":"rhs","qualname":"::parser::ast::MathExpr::rhs","value":"std::boxed::Box<parser::ast::Expr>","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" The right hand side of the expression\n","sig":null,"attributes":[{"value":"/ The right hand side of the expression","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115026,"byte_end":115067,"line_start":104,"line_end":104,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2016},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115126,"byte_end":115134,"line_start":107,"line_end":107,"column_start":9,"column_end":17},"name":"operator","qualname":"::parser::ast::MathExpr::operator","value":"parser::ast::MathOperator","parent":{"krate":0,"index":2013},"children":[],"decl_id":null,"docs":" The operator used\n","sig":null,"attributes":[{"value":"/ The operator used","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115096,"byte_end":115117,"line_start":106,"line_end":106,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":2025},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115224,"byte_end":115233,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"LogicExpr","qualname":"::parser::ast::LogicExpr","value":"LogicExpr { lhs, rhs, operator }","parent":null,"children":[{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2028}],"decl_id":null,"docs":" A logical expression\n","sig":null,"attributes":[{"value":"/ A logical expression","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115153,"byte_end":115177,"line_start":110,"line_end":110,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2026},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115289,"byte_end":115292,"line_start":114,"line_end":114,"column_start":9,"column_end":12},"name":"lhs","qualname":"::parser::ast::LogicExpr::lhs","value":"std::boxed::Box<parser::ast::Expr>","parent":{"krate":0,"index":2025},"children":[],"decl_id":null,"docs":" The left hand side of the expression\n","sig":null,"attributes":[{"value":"/ The left hand side of the expression","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115240,"byte_end":115280,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2027},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115359,"byte_end":115362,"line_start":116,"line_end":116,"column_start":9,"column_end":12},"name":"rhs","qualname":"::parser::ast::LogicExpr::rhs","value":"std::boxed::Box<parser::ast::Expr>","parent":{"krate":0,"index":2025},"children":[],"decl_id":null,"docs":" The right hand side of the expression\n","sig":null,"attributes":[{"value":"/ The right hand side of the expression","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115309,"byte_end":115350,"line_start":115,"line_end":115,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2028},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115409,"byte_end":115417,"line_start":118,"line_end":118,"column_start":9,"column_end":17},"name":"operator","qualname":"::parser::ast::LogicExpr::operator","value":"parser::ast::LogicOperator","parent":{"krate":0,"index":2025},"children":[],"decl_id":null,"docs":" The operator used\n","sig":null,"attributes":[{"value":"/ The operator used","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115379,"byte_end":115400,"line_start":117,"line_end":117,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":2037},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115548,"byte_end":115560,"line_start":123,"line_end":123,"column_start":12,"column_end":24},"name":"StringConcat","qualname":"::parser::ast::StringConcat","value":"StringConcat { values }","parent":null,"children":[{"krate":0,"index":2038}],"decl_id":null,"docs":" Can only be a combination of string + ident or ident + ident\n","sig":null,"attributes":[{"value":"/ Can only be a combination of string + ident or ident + ident","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115437,"byte_end":115501,"line_start":121,"line_end":121,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2038},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115626,"byte_end":115632,"line_start":125,"line_end":125,"column_start":9,"column_end":15},"name":"values","qualname":"::parser::ast::StringConcat::values","value":"std::vec::Vec<parser::ast::ExprVal>","parent":{"krate":0,"index":2037},"children":[],"decl_id":null,"docs":" All the values we're concatening into a string\n","sig":null,"attributes":[{"value":"/ All the values we're concatening into a string","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115567,"byte_end":115617,"line_start":124,"line_end":124,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2048},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115810,"byte_end":115816,"line_start":132,"line_end":132,"column_start":5,"column_end":11},"name":"String","qualname":"::parser::ast::ExprVal::String","value":"ExprVal::String(String)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2051},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115830,"byte_end":115833,"line_start":133,"line_end":133,"column_start":5,"column_end":8},"name":"Int","qualname":"::parser::ast::ExprVal::Int","value":"ExprVal::Int(i64)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2054},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115844,"byte_end":115849,"line_start":134,"line_end":134,"column_start":5,"column_end":10},"name":"Float","qualname":"::parser::ast::ExprVal::Float","value":"ExprVal::Float(f64)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2057},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115860,"byte_end":115864,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bool","qualname":"::parser::ast::ExprVal::Bool","value":"ExprVal::Bool(bool)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2060},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115876,"byte_end":115881,"line_start":136,"line_end":136,"column_start":5,"column_end":10},"name":"Ident","qualname":"::parser::ast::ExprVal::Ident","value":"ExprVal::Ident(String)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2063},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115895,"byte_end":115899,"line_start":137,"line_end":137,"column_start":5,"column_end":9},"name":"Math","qualname":"::parser::ast::ExprVal::Math","value":"ExprVal::Math(MathExpr)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2066},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115915,"byte_end":115920,"line_start":138,"line_end":138,"column_start":5,"column_end":10},"name":"Logic","qualname":"::parser::ast::ExprVal::Logic","value":"ExprVal::Logic(LogicExpr)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2069},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115937,"byte_end":115941,"line_start":139,"line_end":139,"column_start":5,"column_end":9},"name":"Test","qualname":"::parser::ast::ExprVal::Test","value":"ExprVal::Test(Test)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2072},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115953,"byte_end":115962,"line_start":140,"line_end":140,"column_start":5,"column_end":14},"name":"MacroCall","qualname":"::parser::ast::ExprVal::MacroCall","value":"ExprVal::MacroCall(MacroCall)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2075},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115979,"byte_end":115991,"line_start":141,"line_end":141,"column_start":5,"column_end":17},"name":"FunctionCall","qualname":"::parser::ast::ExprVal::FunctionCall","value":"ExprVal::FunctionCall(FunctionCall)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2078},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116102,"byte_end":116107,"line_start":144,"line_end":144,"column_start":5,"column_end":10},"name":"Array","qualname":"::parser::ast::ExprVal::Array","value":"ExprVal::Array(Vec<Expr>)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2081},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116124,"byte_end":116136,"line_start":145,"line_end":145,"column_start":5,"column_end":17},"name":"StringConcat","qualname":"::parser::ast::ExprVal::StringConcat","value":"ExprVal::StringConcat(StringConcat)","parent":{"krate":0,"index":2047},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2047},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115796,"byte_end":115803,"line_start":131,"line_end":131,"column_start":10,"column_end":17},"name":"ExprVal","qualname":"::parser::ast::ExprVal","value":"pub enum ExprVal {\n    String(String),\n    Int(i64),\n    Float(f64),\n    Bool(bool),\n    Ident(String),\n    Math(MathExpr),\n    Logic(LogicExpr),\n    Test(Test),\n    MacroCall(MacroCall),\n    FunctionCall(FunctionCall),\n    Array(Vec<Expr>),\n    StringConcat(StringConcat),\n}","parent":null,"children":[{"krate":0,"index":2048},{"krate":0,"index":2051},{"krate":0,"index":2054},{"krate":0,"index":2057},{"krate":0,"index":2060},{"krate":0,"index":2063},{"krate":0,"index":2066},{"krate":0,"index":2069},{"krate":0,"index":2072},{"krate":0,"index":2075},{"krate":0,"index":2078},{"krate":0,"index":2081}],"decl_id":null,"docs":" An expression is the node found in variable block, kwargs and conditions.\n","sig":null,"attributes":[{"value":"/ An expression is the node found in variable block, kwargs and conditions.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115651,"byte_end":115728,"line_start":128,"line_end":128,"column_start":1,"column_end":78}},{"value":"allow(missing_docs)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":115764,"byte_end":115786,"line_start":130,"line_end":130,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2092},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116287,"byte_end":116291,"line_start":151,"line_end":151,"column_start":12,"column_end":16},"name":"Expr","qualname":"::parser::ast::Expr","value":"Expr { val, negated, filters }","parent":null,"children":[{"krate":0,"index":2093},{"krate":0,"index":2094},{"krate":0,"index":2095}],"decl_id":null,"docs":" An expression is a value that can be negated and followed by\n optional filters\n","sig":null,"attributes":[{"value":"/ An expression is a value that can be negated and followed by","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116155,"byte_end":116219,"line_start":148,"line_end":148,"column_start":1,"column_end":65}},{"value":"/ optional filters","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116220,"byte_end":116240,"line_start":149,"line_end":149,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2093},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116343,"byte_end":116346,"line_start":153,"line_end":153,"column_start":9,"column_end":12},"name":"val","qualname":"::parser::ast::Expr::val","value":"parser::ast::ExprVal","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" The expression we are evaluating\n","sig":null,"attributes":[{"value":"/ The expression we are evaluating","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116298,"byte_end":116334,"line_start":152,"line_end":152,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2094},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116392,"byte_end":116399,"line_start":155,"line_end":155,"column_start":9,"column_end":16},"name":"negated","qualname":"::parser::ast::Expr::negated","value":"bool","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" Is it using `not`?\n","sig":null,"attributes":[{"value":"/ Is it using `not`?","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116361,"byte_end":116383,"line_start":154,"line_end":154,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":2095},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116458,"byte_end":116465,"line_start":157,"line_end":157,"column_start":9,"column_end":16},"name":"filters","qualname":"::parser::ast::Expr::filters","value":"std::vec::Vec<parser::ast::FunctionCall>","parent":{"krate":0,"index":2092},"children":[],"decl_id":null,"docs":" List of filters used on that value\n","sig":null,"attributes":[{"value":"/ List of filters used on that value","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116411,"byte_end":116449,"line_start":156,"line_end":156,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116544,"byte_end":116547,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"new","qualname":"<Expr>::new","value":"pub fn new(ExprVal) -> Expr","parent":null,"children":[],"decl_id":null,"docs":" Create a new basic Expr\n","sig":null,"attributes":[{"value":"/ Create a new basic Expr","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116505,"byte_end":116532,"line_start":161,"line_end":161,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116678,"byte_end":116689,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"new_negated","qualname":"<Expr>::new_negated","value":"pub fn new_negated(ExprVal) -> Expr","parent":null,"children":[],"decl_id":null,"docs":" Create a new negated Expr\n","sig":null,"attributes":[{"value":"/ Create a new negated Expr","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116637,"byte_end":116666,"line_start":166,"line_end":166,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116835,"byte_end":116847,"line_start":172,"line_end":172,"column_start":12,"column_end":24},"name":"with_filters","qualname":"<Expr>::with_filters","value":"pub fn with_filters(ExprVal, Vec<FunctionCall>) -> Expr","parent":null,"children":[],"decl_id":null,"docs":" Create a new basic Expr with some filters\n","sig":null,"attributes":[{"value":"/ Create a new basic Expr with some filters","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116778,"byte_end":116823,"line_start":171,"line_end":171,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117027,"byte_end":117045,"line_start":177,"line_end":177,"column_start":12,"column_end":30},"name":"has_default_filter","qualname":"<Expr>::has_default_filter","value":"pub fn has_default_filter(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the expr has a default filter as first filter\n","sig":null,"attributes":[{"value":"/ Check if the expr has a default filter as first filter","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116957,"byte_end":117015,"line_start":176,"line_end":176,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2104},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117269,"byte_end":117273,"line_start":188,"line_end":188,"column_start":12,"column_end":16},"name":"Test","qualname":"::parser::ast::Test","value":"Test { ident, name, args }","parent":null,"children":[{"krate":0,"index":2105},{"krate":0,"index":2106},{"krate":0,"index":2107}],"decl_id":null,"docs":" A test node `if my_var is odd`\n","sig":null,"attributes":[{"value":"/ A test node `if my_var is odd`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117188,"byte_end":117222,"line_start":186,"line_end":186,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2105},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117322,"byte_end":117327,"line_start":190,"line_end":190,"column_start":9,"column_end":14},"name":"ident","qualname":"::parser::ast::Test::ident","value":"std::string::String","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Which expression is evaluated\n","sig":null,"attributes":[{"value":"/ Which expression is evaluated","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117280,"byte_end":117313,"line_start":189,"line_end":189,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":2106},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117370,"byte_end":117374,"line_start":192,"line_end":192,"column_start":9,"column_end":13},"name":"name","qualname":"::parser::ast::Test::name","value":"std::string::String","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Name of the test\n","sig":null,"attributes":[{"value":"/ Name of the test","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117341,"byte_end":117361,"line_start":191,"line_end":191,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2107},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117435,"byte_end":117439,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"name":"args","qualname":"::parser::ast::Test::args","value":"std::vec::Vec<parser::ast::Expr>","parent":{"krate":0,"index":2104},"children":[],"decl_id":null,"docs":" Any optional arg given to the test\n","sig":null,"attributes":[{"value":"/ Any optional arg given to the test","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117388,"byte_end":117426,"line_start":193,"line_end":193,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2116},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117586,"byte_end":117599,"line_start":199,"line_end":199,"column_start":12,"column_end":25},"name":"FilterSection","qualname":"::parser::ast::FilterSection","value":"FilterSection { filter, body }","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2118}],"decl_id":null,"docs":" A filter section node `{{ filter name(param=\"value\") }} content {{ endfilter }}`\n","sig":null,"attributes":[{"value":"/ A filter section node `{{ filter name(param=\"value\") }} content {{ endfilter }}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117455,"byte_end":117539,"line_start":197,"line_end":197,"column_start":1,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":2117},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117640,"byte_end":117646,"line_start":201,"line_end":201,"column_start":9,"column_end":15},"name":"filter","qualname":"::parser::ast::FilterSection::filter","value":"parser::ast::FunctionCall","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" The filter call itsel\n","sig":null,"attributes":[{"value":"/ The filter call itsel","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117606,"byte_end":117631,"line_start":200,"line_end":200,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2118},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117694,"byte_end":117698,"line_start":203,"line_end":203,"column_start":9,"column_end":13},"name":"body","qualname":"::parser::ast::FilterSection::body","value":"std::vec::Vec<parser::ast::Node>","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" The filter body\n","sig":null,"attributes":[{"value":"/ The filter body","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117666,"byte_end":117685,"line_start":202,"line_end":202,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":2127},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117818,"byte_end":117821,"line_start":208,"line_end":208,"column_start":12,"column_end":15},"name":"Set","qualname":"::parser::ast::Set","value":"Set { key, value, global }","parent":null,"children":[{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130}],"decl_id":null,"docs":" Set a variable in the context `{% set val = \"hey\" %}`\n","sig":null,"attributes":[{"value":"/ Set a variable in the context `{% set val = \"hey\" %}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117714,"byte_end":117771,"line_start":206,"line_end":206,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2128},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117879,"byte_end":117882,"line_start":210,"line_end":210,"column_start":9,"column_end":12},"name":"key","qualname":"::parser::ast::Set::key","value":"std::string::String","parent":{"krate":0,"index":2127},"children":[],"decl_id":null,"docs":" The name for that value in the context\n","sig":null,"attributes":[{"value":"/ The name for that value in the context","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117828,"byte_end":117870,"line_start":209,"line_end":209,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2129},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117928,"byte_end":117933,"line_start":212,"line_end":212,"column_start":9,"column_end":14},"name":"value","qualname":"::parser::ast::Set::value","value":"parser::ast::Expr","parent":{"krate":0,"index":2127},"children":[],"decl_id":null,"docs":" The value to assign\n","sig":null,"attributes":[{"value":"/ The value to assign","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117896,"byte_end":117919,"line_start":211,"line_end":211,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2130},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118056,"byte_end":118062,"line_start":215,"line_end":215,"column_start":9,"column_end":15},"name":"global","qualname":"::parser::ast::Set::global","value":"bool","parent":{"krate":0,"index":2127},"children":[],"decl_id":null,"docs":" Whether we want to set the variable globally or locally\n global_set is only useful in loops\n","sig":null,"attributes":[{"value":"/ Whether we want to set the variable globally or locally","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":117945,"byte_end":118004,"line_start":213,"line_end":213,"column_start":5,"column_end":64}},{"value":"/ global_set is only useful in loops","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118009,"byte_end":118047,"line_start":214,"line_end":214,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2139},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118173,"byte_end":118182,"line_start":220,"line_end":220,"column_start":12,"column_end":21},"name":"MacroCall","qualname":"::parser::ast::MacroCall","value":"MacroCall { namespace, name, args }","parent":null,"children":[{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":2142}],"decl_id":null,"docs":" A call to a namespaced macro `macros::my_macro()`\n","sig":null,"attributes":[{"value":"/ A call to a namespaced macro `macros::my_macro()`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118073,"byte_end":118126,"line_start":218,"line_end":218,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2140},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118247,"byte_end":118256,"line_start":222,"line_end":222,"column_start":9,"column_end":18},"name":"namespace","qualname":"::parser::ast::MacroCall::namespace","value":"std::string::String","parent":{"krate":0,"index":2139},"children":[],"decl_id":null,"docs":" The namespace we're looking for that macro in\n","sig":null,"attributes":[{"value":"/ The namespace we're looking for that macro in","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118189,"byte_end":118238,"line_start":221,"line_end":221,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2141},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118297,"byte_end":118301,"line_start":224,"line_end":224,"column_start":9,"column_end":13},"name":"name","qualname":"::parser::ast::MacroCall::name","value":"std::string::String","parent":{"krate":0,"index":2139},"children":[],"decl_id":null,"docs":" The macro name\n","sig":null,"attributes":[{"value":"/ The macro name","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118270,"byte_end":118288,"line_start":223,"line_end":223,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2142},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118366,"byte_end":118370,"line_start":226,"line_end":226,"column_start":9,"column_end":13},"name":"args","qualname":"::parser::ast::MacroCall::args","value":"std::collections::HashMap<std::string::String, parser::ast::Expr>","parent":{"krate":0,"index":2139},"children":[],"decl_id":null,"docs":" The args for that macro: name -> value\n","sig":null,"attributes":[{"value":"/ The args for that macro: name -> value","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118315,"byte_end":118357,"line_start":225,"line_end":225,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2151},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118467,"byte_end":118482,"line_start":231,"line_end":231,"column_start":12,"column_end":27},"name":"MacroDefinition","qualname":"::parser::ast::MacroDefinition","value":"MacroDefinition { name, args, body }","parent":null,"children":[{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154}],"decl_id":null,"docs":" A Macro definition\n","sig":null,"attributes":[{"value":"/ A Macro definition","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118398,"byte_end":118420,"line_start":229,"line_end":229,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2152},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118516,"byte_end":118520,"line_start":233,"line_end":233,"column_start":9,"column_end":13},"name":"name","qualname":"::parser::ast::MacroDefinition::name","value":"std::string::String","parent":{"krate":0,"index":2151},"children":[],"decl_id":null,"docs":" The macro name\n","sig":null,"attributes":[{"value":"/ The macro name","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118489,"byte_end":118507,"line_start":232,"line_end":232,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2153},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118602,"byte_end":118606,"line_start":235,"line_end":235,"column_start":9,"column_end":13},"name":"args","qualname":"::parser::ast::MacroDefinition::args","value":"std::collections::HashMap<std::string::String, std::option::Option<parser::ast::Expr>>","parent":{"krate":0,"index":2151},"children":[],"decl_id":null,"docs":" The args for that macro: name -> optional default value\n","sig":null,"attributes":[{"value":"/ The args for that macro: name -> optional default value","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118534,"byte_end":118593,"line_start":234,"line_end":234,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":2154},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118673,"byte_end":118677,"line_start":237,"line_end":237,"column_start":9,"column_end":13},"name":"body","qualname":"::parser::ast::MacroDefinition::body","value":"std::vec::Vec<parser::ast::Node>","parent":{"krate":0,"index":2151},"children":[],"decl_id":null,"docs":" The macro content\n","sig":null,"attributes":[{"value":"/ The macro content","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118643,"byte_end":118664,"line_start":236,"line_end":236,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":2163},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118762,"byte_end":118767,"line_start":242,"line_end":242,"column_start":12,"column_end":17},"name":"Block","qualname":"::parser::ast::Block","value":"Block { name, body }","parent":null,"children":[{"krate":0,"index":2164},{"krate":0,"index":2165}],"decl_id":null,"docs":" A block definition\n","sig":null,"attributes":[{"value":"/ A block definition","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118693,"byte_end":118715,"line_start":240,"line_end":240,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2164},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118801,"byte_end":118805,"line_start":244,"line_end":244,"column_start":9,"column_end":13},"name":"name","qualname":"::parser::ast::Block::name","value":"std::string::String","parent":{"krate":0,"index":2163},"children":[],"decl_id":null,"docs":" The block name\n","sig":null,"attributes":[{"value":"/ The block name","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118774,"byte_end":118792,"line_start":243,"line_end":243,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2165},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118849,"byte_end":118853,"line_start":246,"line_end":246,"column_start":9,"column_end":13},"name":"body","qualname":"::parser::ast::Block::body","value":"std::vec::Vec<parser::ast::Node>","parent":{"krate":0,"index":2163},"children":[],"decl_id":null,"docs":" The block content\n","sig":null,"attributes":[{"value":"/ The block content","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118819,"byte_end":118840,"line_start":245,"line_end":245,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":2174},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118963,"byte_end":118970,"line_start":251,"line_end":251,"column_start":12,"column_end":19},"name":"Forloop","qualname":"::parser::ast::Forloop","value":"Forloop { key, value, container, body }","parent":null,"children":[{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178}],"decl_id":null,"docs":" A forloop: can be over values or key/values\n","sig":null,"attributes":[{"value":"/ A forloop: can be over values or key/values","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118869,"byte_end":118916,"line_start":249,"line_end":249,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2175},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119059,"byte_end":119062,"line_start":253,"line_end":253,"column_start":9,"column_end":12},"name":"key","qualname":"::parser::ast::Forloop::key","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":2174},"children":[],"decl_id":null,"docs":" Name of the key in the loop (only when iterating on map-like objects)\n","sig":null,"attributes":[{"value":"/ Name of the key in the loop (only when iterating on map-like objects)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":118977,"byte_end":119050,"line_start":252,"line_end":252,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":2176},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119149,"byte_end":119154,"line_start":255,"line_end":255,"column_start":9,"column_end":14},"name":"value","qualname":"::parser::ast::Forloop::value","value":"std::string::String","parent":{"krate":0,"index":2174},"children":[],"decl_id":null,"docs":" Name of the local variable for the value in the loop\n","sig":null,"attributes":[{"value":"/ Name of the local variable for the value in the loop","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119084,"byte_end":119140,"line_start":254,"line_end":254,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":2177},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119209,"byte_end":119218,"line_start":257,"line_end":257,"column_start":9,"column_end":18},"name":"container","qualname":"::parser::ast::Forloop::container","value":"parser::ast::Expr","parent":{"krate":0,"index":2174},"children":[],"decl_id":null,"docs":" Expression being iterated on\n","sig":null,"attributes":[{"value":"/ Expression being iterated on","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119168,"byte_end":119200,"line_start":256,"line_end":256,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":2178},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119271,"byte_end":119275,"line_start":259,"line_end":259,"column_start":9,"column_end":13},"name":"body","qualname":"::parser::ast::Forloop::body","value":"std::vec::Vec<parser::ast::Node>","parent":{"krate":0,"index":2174},"children":[],"decl_id":null,"docs":" What's in the forloop itself\n","sig":null,"attributes":[{"value":"/ What's in the forloop itself","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119230,"byte_end":119262,"line_start":258,"line_end":258,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":2187},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119394,"byte_end":119396,"line_start":264,"line_end":264,"column_start":12,"column_end":14},"name":"If","qualname":"::parser::ast::If","value":"If { conditions, otherwise }","parent":null,"children":[{"krate":0,"index":2188},{"krate":0,"index":2189}],"decl_id":null,"docs":" An if/elif/else condition with their respective body\n","sig":null,"attributes":[{"value":"/ An if/elif/else condition with their respective body","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119291,"byte_end":119347,"line_start":262,"line_end":262,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":2188},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119465,"byte_end":119475,"line_start":266,"line_end":266,"column_start":9,"column_end":19},"name":"conditions","qualname":"::parser::ast::If::conditions","value":"std::vec::Vec<(parser::ast::WS, parser::ast::Expr, std::vec::Vec<parser::ast::Node>)>","parent":{"krate":0,"index":2187},"children":[],"decl_id":null,"docs":" First item if the if, all the ones after are elif\n","sig":null,"attributes":[{"value":"/ First item if the if, all the ones after are elif","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119403,"byte_end":119456,"line_start":265,"line_end":265,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2189},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119547,"byte_end":119556,"line_start":268,"line_end":268,"column_start":9,"column_end":18},"name":"otherwise","qualname":"::parser::ast::If::otherwise","value":"std::option::Option<(parser::ast::WS, std::vec::Vec<parser::ast::Node>)>","parent":{"krate":0,"index":2187},"children":[],"decl_id":null,"docs":" The optional `else` block\n","sig":null,"attributes":[{"value":"/ The optional `else` block","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119509,"byte_end":119538,"line_start":267,"line_end":267,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2199},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119729,"byte_end":119734,"line_start":275,"line_end":275,"column_start":5,"column_end":10},"name":"Super","qualname":"::parser::ast::Node::Super","value":"Node::Super","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" A call to `{{ super() }}` in a block\n","sig":null,"attributes":[{"value":"/ A call to `{{ super() }}` in a block","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119684,"byte_end":119724,"line_start":274,"line_end":274,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2201},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119766,"byte_end":119770,"line_start":278,"line_end":278,"column_start":5,"column_end":9},"name":"Text","qualname":"::parser::ast::Node::Text","value":"Node::Text(String)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" Some actual text\n","sig":null,"attributes":[{"value":"/ Some actual text","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119741,"byte_end":119761,"line_start":277,"line_end":277,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2204},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119808,"byte_end":119821,"line_start":280,"line_end":280,"column_start":5,"column_end":18},"name":"VariableBlock","qualname":"::parser::ast::Node::VariableBlock","value":"Node::VariableBlock(Expr)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" A `{{ }}` block\n","sig":null,"attributes":[{"value":"/ A `{{ }}` block","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119784,"byte_end":119803,"line_start":279,"line_end":279,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2207},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119882,"byte_end":119897,"line_start":282,"line_end":282,"column_start":5,"column_end":20},"name":"MacroDefinition","qualname":"::parser::ast::Node::MacroDefinition","value":"Node::MacroDefinition(WS, MacroDefinition, WS)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" A `{% macro hello() %}...{% endmacro %}`\n","sig":null,"attributes":[{"value":"/ A `{% macro hello() %}...{% endmacro %}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119833,"byte_end":119877,"line_start":281,"line_end":281,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2212},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120004,"byte_end":120011,"line_start":285,"line_end":285,"column_start":5,"column_end":12},"name":"Extends","qualname":"::parser::ast::Node::Extends","value":"Node::Extends(WS, String)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The `{% extends \"blabla.html\" %}` node, contains the template name\n","sig":null,"attributes":[{"value":"/ The `{% extends \"blabla.html\" %}` node, contains the template name","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119929,"byte_end":119999,"line_start":284,"line_end":284,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2216},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120104,"byte_end":120111,"line_start":287,"line_end":287,"column_start":5,"column_end":12},"name":"Include","qualname":"::parser::ast::Node::Include","value":"Node::Include(WS, String)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The `{% include \"blabla.html\" %}` node, contains the template name\n","sig":null,"attributes":[{"value":"/ The `{% include \"blabla.html\" %}` node, contains the template name","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120029,"byte_end":120099,"line_start":286,"line_end":286,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2220},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120180,"byte_end":120191,"line_start":289,"line_end":289,"column_start":5,"column_end":16},"name":"ImportMacro","qualname":"::parser::ast::Node::ImportMacro","value":"Node::ImportMacro(WS, String, String)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The `{% import \"macros.html\" as macros %}`\n","sig":null,"attributes":[{"value":"/ The `{% import \"macros.html\" as macros %}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120129,"byte_end":120175,"line_start":288,"line_end":288,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2225},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120261,"byte_end":120264,"line_start":291,"line_end":291,"column_start":5,"column_end":8},"name":"Set","qualname":"::parser::ast::Node::Set","value":"Node::Set(WS, Set)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The `{% set val = something %}` tag\n","sig":null,"attributes":[{"value":"/ The `{% set val = something %}` tag","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120217,"byte_end":120256,"line_start":290,"line_end":290,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2229},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120336,"byte_end":120339,"line_start":294,"line_end":294,"column_start":5,"column_end":8},"name":"Raw","qualname":"::parser::ast::Node::Raw","value":"Node::Raw(WS, String, WS)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The text between `{% raw %}` and `{% endraw %}`\n","sig":null,"attributes":[{"value":"/ The text between `{% raw %}` and `{% endraw %}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120280,"byte_end":120331,"line_start":293,"line_end":293,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2234},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120451,"byte_end":120464,"line_start":297,"line_end":297,"column_start":5,"column_end":18},"name":"FilterSection","qualname":"::parser::ast::Node::FilterSection","value":"Node::FilterSection(WS, FilterSection, WS)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" A filter section node `{{ filter name(param=\"value\") }} content {{ endfilter }}`\n","sig":null,"attributes":[{"value":"/ A filter section node `{{ filter name(param=\"value\") }} content {{ endfilter }}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120362,"byte_end":120446,"line_start":296,"line_end":296,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2239},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120539,"byte_end":120544,"line_start":299,"line_end":299,"column_start":5,"column_end":10},"name":"Block","qualname":"::parser::ast::Node::Block","value":"Node::Block(WS, Block, WS)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" A `{% block name %}...{% endblock %}`\n","sig":null,"attributes":[{"value":"/ A `{% block name %}...{% endblock %}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120493,"byte_end":120534,"line_start":298,"line_end":298,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2244},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120613,"byte_end":120620,"line_start":301,"line_end":301,"column_start":5,"column_end":12},"name":"Forloop","qualname":"::parser::ast::Node::Forloop","value":"Node::Forloop(WS, Forloop, WS)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" A `{% for i in items %}...{% endfor %}`\n","sig":null,"attributes":[{"value":"/ A `{% for i in items %}...{% endfor %}`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120565,"byte_end":120608,"line_start":300,"line_end":300,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2249},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120724,"byte_end":120726,"line_start":304,"line_end":304,"column_start":5,"column_end":7},"name":"If","qualname":"::parser::ast::Node::If","value":"Node::If(If, WS)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" A if/elif/else block, WS for the if/elif/else is directly in the struct\n","sig":null,"attributes":[{"value":"/ A if/elif/else block, WS for the if/elif/else is directly in the struct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120644,"byte_end":120719,"line_start":303,"line_end":303,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2253},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120771,"byte_end":120776,"line_start":307,"line_end":307,"column_start":5,"column_end":10},"name":"Break","qualname":"::parser::ast::Node::Break","value":"Node::Break(WS)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The `{% break %}` tag\n","sig":null,"attributes":[{"value":"/ The `{% break %}` tag","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120741,"byte_end":120766,"line_start":306,"line_end":306,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2256},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120819,"byte_end":120827,"line_start":309,"line_end":309,"column_start":5,"column_end":13},"name":"Continue","qualname":"::parser::ast::Node::Continue","value":"Node::Continue(WS)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" The `{% continue %}` tag\n","sig":null,"attributes":[{"value":"/ The `{% continue %}` tag","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":120786,"byte_end":120814,"line_start":308,"line_end":308,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":2198},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119673,"byte_end":119677,"line_start":273,"line_end":273,"column_start":10,"column_end":14},"name":"Node","qualname":"::parser::ast::Node","value":"pub enum Node {\n\n    /// A call to `{{ super() }}` in a block\n    Super,\n\n    /// Some actual text\n    Text(String),\n\n    /// A `{{ }}` block\n    VariableBlock(Expr),\n\n    /// A `{% macro hello() %}...{% endmacro %}`\n    MacroDefinition(WS, MacroDefinition, WS),\n\n    /// The `{% extends \"blabla.html\" %}` node, contains the template name\n    Extends(WS, String),\n\n    /// The `{% include \"blabla.html\" %}` node, contains the template name\n    Include(WS, String),\n\n    /// The `{% import \"macros.html\" as macros %}`\n    ImportMacro(WS, String, String),\n\n    /// The `{% set val = something %}` tag\n    Set(WS, Set),\n\n    /// The text between `{% raw %}` and `{% endraw %}`\n    Raw(WS, String, WS),\n\n    /// A filter section node `{{ filter name(param=\"value\") }} content {{ endfilter }}`\n    FilterSection(WS, FilterSection, WS),\n\n    /// A `{% block name %}...{% endblock %}`\n    Block(WS, Block, WS),\n\n    /// A `{% for i in items %}...{% endfor %}`\n    Forloop(WS, Forloop, WS),\n\n    /// A if/elif/else block, WS for the if/elif/else is directly in the struct\n    If(If, WS),\n\n    /// The `{% break %}` tag\n    Break(WS),\n\n    /// The `{% continue %}` tag\n    Continue(WS),\n}","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2201},{"krate":0,"index":2204},{"krate":0,"index":2207},{"krate":0,"index":2212},{"krate":0,"index":2216},{"krate":0,"index":2220},{"krate":0,"index":2225},{"krate":0,"index":2229},{"krate":0,"index":2234},{"krate":0,"index":2239},{"krate":0,"index":2244},{"krate":0,"index":2249},{"krate":0,"index":2253},{"krate":0,"index":2256}],"decl_id":null,"docs":" All Tera nodes that can be encountered\n","sig":null,"attributes":[{"value":"/ All Tera nodes that can be encountered","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":119586,"byte_end":119628,"line_start":271,"line_end":271,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2448},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193160,"byte_end":193168,"line_start":11,"line_end":11,"column_start":12,"column_end":20},"name":"Template","qualname":"::template::Template","value":"Template { name, path, ast, from_extend, macros, imported_macro_files, parent, blocks, parents, blocks_definitions }","parent":null,"children":[{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2452},{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456},{"krate":0,"index":2457},{"krate":0,"index":2458}],"decl_id":null,"docs":" This is the parsed equivalent of a template file.\n It also does some pre-processing to ensure it does as less as possible at runtime\n Not mean to be used directly.\n","sig":null,"attributes":[{"value":"/ This is the parsed equivalent of a template file.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":192951,"byte_end":193004,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ It also does some pre-processing to ensure it does as less as possible at runtime","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193005,"byte_end":193090,"line_start":8,"line_end":8,"column_start":1,"column_end":86}},{"value":"/ Not mean to be used directly.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193091,"byte_end":193124,"line_start":9,"line_end":9,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2449},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193242,"byte_end":193246,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"::template::Template::name","value":"std::string::String","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" Name of the template, usually very similar to the path\n","sig":null,"attributes":[{"value":"/ Name of the template, usually very similar to the path","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193175,"byte_end":193233,"line_start":12,"line_end":12,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":2450},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193394,"byte_end":193398,"line_start":16,"line_end":16,"column_start":9,"column_end":13},"name":"path","qualname":"::template::Template::path","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" Original path of the file. A template doesn't necessarily have\n a file associated with it though so it's optional.\n","sig":null,"attributes":[{"value":"/ Original path of the file. A template doesn't necessarily have","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193260,"byte_end":193326,"line_start":14,"line_end":14,"column_start":5,"column_end":71}},{"value":"/ a file associated with it though so it's optional.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193331,"byte_end":193385,"line_start":15,"line_end":15,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2451},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193469,"byte_end":193472,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"name":"ast","qualname":"::template::Template::ast","value":"std::vec::Vec<parser::ast::Node>","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" Parsed AST, after whitespace removal\n","sig":null,"attributes":[{"value":"/ Parsed AST, after whitespace removal","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193420,"byte_end":193460,"line_start":17,"line_end":17,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2452},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193626,"byte_end":193637,"line_start":21,"line_end":21,"column_start":9,"column_end":20},"name":"from_extend","qualname":"::template::Template::from_extend","value":"bool","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" Whether this template came from a call to `Tera::extend`, so we do\n not remove it when we are doing a template reload\n","sig":null,"attributes":[{"value":"/ Whether this template came from a call to `Tera::extend`, so we do","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193489,"byte_end":193559,"line_start":19,"line_end":19,"column_start":5,"column_end":75}},{"value":"/ not remove it when we are doing a template reload","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193564,"byte_end":193617,"line_start":20,"line_end":20,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2453},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193714,"byte_end":193720,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"name":"macros","qualname":"::template::Template::macros","value":"std::collections::HashMap<std::string::String, parser::ast::MacroDefinition>","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" Macros defined in that file: name -> definition ast\n","sig":null,"attributes":[{"value":"/ Macros defined in that file: name -> definition ast","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193650,"byte_end":193705,"line_start":23,"line_end":23,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2454},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193831,"byte_end":193851,"line_start":26,"line_end":26,"column_start":9,"column_end":29},"name":"imported_macro_files","qualname":"::template::Template::imported_macro_files","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" (filename, namespace) for the macros imported in that file\n","sig":null,"attributes":[{"value":"/ (filename, namespace) for the macros imported in that file","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193760,"byte_end":193822,"line_start":25,"line_end":25,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":2455},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193961,"byte_end":193967,"line_start":29,"line_end":29,"column_start":9,"column_end":15},"name":"parent","qualname":"::template::Template::parent","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" Only used during initial parsing. Rendering will use `self.parents`\n","sig":null,"attributes":[{"value":"/ Only used during initial parsing. Rendering will use `self.parents`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193881,"byte_end":193952,"line_start":28,"line_end":28,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2456},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194080,"byte_end":194086,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"name":"blocks","qualname":"::template::Template::blocks","value":"std::collections::HashMap<std::string::String, parser::ast::Block>","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" Only used during initial parsing. Rendering will use `self.blocks_definitions`\n","sig":null,"attributes":[{"value":"/ Only used during initial parsing. Rendering will use `self.blocks_definitions`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":193989,"byte_end":194071,"line_start":30,"line_end":30,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":2457},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194266,"byte_end":194273,"line_start":35,"line_end":35,"column_start":9,"column_end":16},"name":"parents","qualname":"::template::Template::parents","value":"std::vec::Vec<std::string::String>","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" The full list of parent templates\n","sig":null,"attributes":[{"value":"/ The full list of parent templates","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194220,"byte_end":194257,"line_start":34,"line_end":34,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":2458},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194776,"byte_end":194794,"line_start":42,"line_end":42,"column_start":9,"column_end":27},"name":"blocks_definitions","qualname":"::template::Template::blocks_definitions","value":"std::collections::HashMap<std::string::String, std::vec::Vec<(std::string::String, parser::ast::Block)>>","parent":{"krate":0,"index":2448},"children":[],"decl_id":null,"docs":" The definition of all the blocks for the current template and the definition of those blocks\n in parent templates if there are some.\n Needed for super() to work without having to find them each time.\n The type corresponds to the following `block_name -> [(template name, definition)]`\n The order of the Vec is from the first in hierarchy to the current template and the template\n name is needed in order to load its macros if necessary.\n","sig":null,"attributes":[{"value":"/ The definition of all the blocks for the current template and the definition of those blocks","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194292,"byte_end":194388,"line_start":36,"line_end":36,"column_start":5,"column_end":101}},{"value":"/ in parent templates if there are some.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194393,"byte_end":194435,"line_start":37,"line_end":37,"column_start":5,"column_end":47}},{"value":"/ Needed for super() to work without having to find them each time.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194440,"byte_end":194509,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ The type corresponds to the following `block_name -> [(template name, definition)]`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194514,"byte_end":194601,"line_start":39,"line_end":39,"column_start":5,"column_end":92}},{"value":"/ The order of the Vec is from the first in hierarchy to the current template and the template","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194606,"byte_end":194702,"line_start":40,"line_end":40,"column_start":5,"column_end":101}},{"value":"/ name is needed in order to load its macros if necessary.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194707,"byte_end":194767,"line_start":41,"line_end":41,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194905,"byte_end":194908,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<Template>::new","value":"pub fn new(&str, Option<String>, &str) -> Result<Template>","parent":null,"children":[],"decl_id":null,"docs":" Parse the template string given\n","sig":null,"attributes":[{"value":"/ Parse the template string given","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194858,"byte_end":194893,"line_start":46,"line_end":46,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":550},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":199413,"byte_end":199417,"line_start":23,"line_end":23,"column_start":12,"column_end":16},"name":"Tera","qualname":"::tera::Tera","value":"Tera { templates, filters, testers, global_functions, autoescape_suffixes }","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557}],"decl_id":null,"docs":" The main point of interaction in this library.\n","sig":null,"attributes":[{"value":"/ The main point of interaction in this library.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":199351,"byte_end":199401,"line_start":22,"line_end":22,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":552},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":199571,"byte_end":199580,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"name":"templates","qualname":"::tera::Tera::templates","value":"std::collections::HashMap<std::string::String, template::Template>","parent":{"krate":0,"index":550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":553},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":199636,"byte_end":199643,"line_start":30,"line_end":30,"column_start":9,"column_end":16},"name":"filters","qualname":"::tera::Tera::filters","value":"std::collections::HashMap<std::string::String, fn(serde_json::Value, std::collections::HashMap<std::string::String, serde_json::Value>) -> std::result::Result<serde_json::Value, errors::Error>>","parent":{"krate":0,"index":550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":554},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":199699,"byte_end":199706,"line_start":32,"line_end":32,"column_start":9,"column_end":16},"name":"testers","qualname":"::tera::Tera::testers","value":"std::collections::HashMap<std::string::String, fn(std::option::Option<serde_json::Value>, std::vec::Vec<serde_json::Value>) -> std::result::Result<bool, errors::Error>>","parent":{"krate":0,"index":550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":555},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":199762,"byte_end":199778,"line_start":34,"line_end":34,"column_start":9,"column_end":25},"name":"global_functions","qualname":"::tera::Tera::global_functions","value":"std::collections::HashMap<std::string::String, std::boxed::Box<(dyn std::ops::Fn(std::collections::HashMap<std::string::String, serde_json::Value>) -> std::result::Result<serde_json::Value, errors::Error> + std::marker::Send + std::marker::Sync + 'static)>>","parent":{"krate":0,"index":550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":556},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":199942,"byte_end":199961,"line_start":38,"line_end":38,"column_start":9,"column_end":28},"name":"autoescape_suffixes","qualname":"::tera::Tera::autoescape_suffixes","value":"std::vec::Vec<&'static str>","parent":{"krate":0,"index":550},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201329,"byte_end":201332,"line_start":83,"line_end":83,"column_start":12,"column_end":15},"name":"new","qualname":"<Tera>::new","value":"pub fn new(&str) -> Result<Tera>","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of Tera, containing all the parsed templates found in the `dir` glob","sig":null,"attributes":[{"value":"/ Create a new instance of Tera, containing all the parsed templates found in the `dir` glob","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":200869,"byte_end":200963,"line_start":70,"line_end":70,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":200968,"byte_end":200971,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ The example below is what the [compile_templates](macro.compile_templates.html) macros expands to.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":200976,"byte_end":201078,"line_start":72,"line_end":72,"column_start":5,"column_end":107}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201083,"byte_end":201086,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/```ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201091,"byte_end":201103,"line_start":74,"line_end":74,"column_start":5,"column_end":17}},{"value":"/match Tera::new(\"templates/**/*\") {","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201108,"byte_end":201146,"line_start":75,"line_end":75,"column_start":5,"column_end":43}},{"value":"/    Ok(t) => t,","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201151,"byte_end":201169,"line_start":76,"line_end":76,"column_start":5,"column_end":23}},{"value":"/    Err(e) => {","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201174,"byte_end":201192,"line_start":77,"line_end":77,"column_start":5,"column_end":23}},{"value":"/        println!(\"Parsing error(s): {}\", e);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201197,"byte_end":201244,"line_start":78,"line_end":78,"column_start":5,"column_end":52}},{"value":"/        ::std::process::exit(1);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201249,"byte_end":201284,"line_start":79,"line_end":79,"column_start":5,"column_end":40}},{"value":"/    }","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201289,"byte_end":201297,"line_start":80,"line_end":80,"column_start":5,"column_end":13}},{"value":"/}","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201302,"byte_end":201306,"line_start":81,"line_end":81,"column_start":5,"column_end":9}},{"value":"/```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201311,"byte_end":201317,"line_start":82,"line_end":82,"column_start":5,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":202126,"byte_end":202131,"line_start":103,"line_end":103,"column_start":12,"column_end":17},"name":"parse","qualname":"<Tera>::parse","value":"pub fn parse(&str) -> Result<Tera>","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance of Tera, containing all the parsed templates found in the `dir` glob\n The difference with `Tera::new` is that it won't build the inheritance chains automatically\n so you are free to modify the templates if you need to.\n You will NOT get a working Tera instance using `Tera::parse`, you will need to call\n `tera.build_inheritance_chains()` to make it usable","sig":null,"attributes":[{"value":"/ Create a new instance of Tera, containing all the parsed templates found in the `dir` glob","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201406,"byte_end":201500,"line_start":87,"line_end":87,"column_start":5,"column_end":99}},{"value":"/ The difference with `Tera::new` is that it won't build the inheritance chains automatically","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201505,"byte_end":201600,"line_start":88,"line_end":88,"column_start":5,"column_end":100}},{"value":"/ so you are free to modify the templates if you need to.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201605,"byte_end":201664,"line_start":89,"line_end":89,"column_start":5,"column_end":64}},{"value":"/ You will NOT get a working Tera instance using `Tera::parse`, you will need to call","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201669,"byte_end":201756,"line_start":90,"line_end":90,"column_start":5,"column_end":92}},{"value":"/ `tera.build_inheritance_chains()` to make it usable","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201761,"byte_end":201816,"line_start":91,"line_end":91,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201821,"byte_end":201824,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/```ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201829,"byte_end":201841,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/let mut tera = match Tera::parse(\"templates/**/*\") {","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201846,"byte_end":201901,"line_start":94,"line_end":94,"column_start":5,"column_end":60}},{"value":"/    Ok(t) => t,","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201906,"byte_end":201924,"line_start":95,"line_end":95,"column_start":5,"column_end":23}},{"value":"/    Err(e) => {","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201929,"byte_end":201947,"line_start":96,"line_end":96,"column_start":5,"column_end":23}},{"value":"/        println!(\"Parsing error(s): {}\", e);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":201952,"byte_end":201999,"line_start":97,"line_end":97,"column_start":5,"column_end":52}},{"value":"/        ::std::process::exit(1);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":202004,"byte_end":202039,"line_start":98,"line_end":98,"column_start":5,"column_end":40}},{"value":"/    }","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":202044,"byte_end":202052,"line_start":99,"line_end":99,"column_start":5,"column_end":13}},{"value":"/};","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":202057,"byte_end":202062,"line_start":100,"line_end":100,"column_start":5,"column_end":10}},{"value":"/tera.build_inheritance_chains()?;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":202067,"byte_end":202103,"line_start":101,"line_end":101,"column_start":5,"column_end":41}},{"value":"/```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":202108,"byte_end":202114,"line_start":102,"line_end":102,"column_start":5,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205607,"byte_end":205631,"line_start":188,"line_end":188,"column_start":12,"column_end":36},"name":"build_inheritance_chains","qualname":"<Tera>::build_inheritance_chains","value":"pub fn build_inheritance_chains(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" We need to know the hierarchy of templates to be able to render multiple extends level\n This happens at compile-time to avoid checking it every time we want to render a template\n This also checks for soundness issues in the inheritance chains, such as missing template or\n circular extends.\n It also builds the block inheritance chain and detects when super() is called in a place\n where it can't possibly work","sig":null,"attributes":[{"value":"/ We need to know the hierarchy of templates to be able to render multiple extends level","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205052,"byte_end":205142,"line_start":180,"line_end":180,"column_start":5,"column_end":95}},{"value":"/ This happens at compile-time to avoid checking it every time we want to render a template","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205147,"byte_end":205240,"line_start":181,"line_end":181,"column_start":5,"column_end":98}},{"value":"/ This also checks for soundness issues in the inheritance chains, such as missing template or","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205245,"byte_end":205341,"line_start":182,"line_end":182,"column_start":5,"column_end":101}},{"value":"/ circular extends.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205346,"byte_end":205367,"line_start":183,"line_end":183,"column_start":5,"column_end":26}},{"value":"/ It also builds the block inheritance chain and detects when super() is called in a place","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205372,"byte_end":205464,"line_start":184,"line_end":184,"column_start":5,"column_end":97}},{"value":"/ where it can't possibly work","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205469,"byte_end":205501,"line_start":185,"line_end":185,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205506,"byte_end":205509,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ You generally don't need to call that yourself, unless you used `Tera::parse`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":205514,"byte_end":205595,"line_start":187,"line_end":187,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209243,"byte_end":209260,"line_start":277,"line_end":277,"column_start":12,"column_end":29},"name":"check_macro_files","qualname":"<Tera>::check_macro_files","value":"pub fn check_macro_files(&Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" We keep track of macro files loaded in each Template so we can know whether one or them\n is missing and error accordingly before the user tries to render a template.","sig":null,"attributes":[{"value":"/ We keep track of macro files loaded in each Template so we can know whether one or them","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":208951,"byte_end":209042,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ is missing and error accordingly before the user tries to render a template.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209047,"byte_end":209127,"line_start":274,"line_end":274,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209132,"byte_end":209135,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ As with `self::build_inheritance_chains`, you don't usually need to call that yourself.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209140,"byte_end":209231,"line_start":276,"line_end":276,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210447,"byte_end":210453,"line_start":309,"line_end":309,"column_start":12,"column_end":18},"name":"render","qualname":"<Tera>::render","value":"pub fn render<T: Serialize>(&Self, &str, &T) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Renders a Tera template given an object that implements `Serialize`.","sig":null,"attributes":[{"value":"/ Renders a Tera template given an object that implements `Serialize`.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209748,"byte_end":209820,"line_start":293,"line_end":293,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209825,"byte_end":209828,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ To render a template with an empty context, simply pass a new `Context` object","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209833,"byte_end":209915,"line_start":295,"line_end":295,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209920,"byte_end":209923,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ If `data` is serializing to an object, an error will be returned.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":209928,"byte_end":209997,"line_start":297,"line_end":297,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210002,"byte_end":210005,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210010,"byte_end":210028,"line_start":299,"line_end":299,"column_start":5,"column_end":23}},{"value":"/ // Rendering a template with a normal context","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210033,"byte_end":210082,"line_start":300,"line_end":300,"column_start":5,"column_end":54}},{"value":"/ let mut context = Context::new();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210087,"byte_end":210124,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"/ context.insert(\"age\", 18);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210129,"byte_end":210159,"line_start":302,"line_end":302,"column_start":5,"column_end":35}},{"value":"/ tera.render(\"hello.html\", &context);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210164,"byte_end":210204,"line_start":303,"line_end":303,"column_start":5,"column_end":45}},{"value":"/ // Rendering a template with a struct that impl `Serialize`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210209,"byte_end":210272,"line_start":304,"line_end":304,"column_start":5,"column_end":68}},{"value":"/ tera.render(\"hello.html\", &product);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210277,"byte_end":210317,"line_start":305,"line_end":305,"column_start":5,"column_end":45}},{"value":"/ // Rendering a template with an empty context","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210322,"byte_end":210371,"line_start":306,"line_end":306,"column_start":5,"column_end":54}},{"value":"/ tera.render(\"hello.html\", &Context::new());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210376,"byte_end":210423,"line_start":307,"line_end":307,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":210428,"byte_end":210435,"line_start":308,"line_end":308,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211746,"byte_end":211753,"line_start":339,"line_end":339,"column_start":12,"column_end":19},"name":"one_off","qualname":"<Tera>::one_off","value":"pub fn one_off<T: Serialize>(&str, &T, bool) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Renders a one off template (for example a template coming from a user input) given a `Context`\n or an object that implements `Serialize`.","sig":null,"attributes":[{"value":"/ Renders a one off template (for example a template coming from a user input) given a `Context`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211002,"byte_end":211100,"line_start":324,"line_end":324,"column_start":5,"column_end":103}},{"value":"/ or an object that implements `Serialize`.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211105,"byte_end":211150,"line_start":325,"line_end":325,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211155,"byte_end":211158,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This creates a separate instance of Tera with no possibilities of adding custom filters","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211163,"byte_end":211254,"line_start":327,"line_end":327,"column_start":5,"column_end":96}},{"value":"/ or testers, parses the template and render it immediately.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211259,"byte_end":211321,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ Any errors will mention the `one_off` template: this is the name given to the template by","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211326,"byte_end":211419,"line_start":329,"line_end":329,"column_start":5,"column_end":98}},{"value":"/ Tera","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211424,"byte_end":211432,"line_start":330,"line_end":330,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211437,"byte_end":211440,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211445,"byte_end":211463,"line_start":332,"line_end":332,"column_start":5,"column_end":23}},{"value":"/ let mut context = Context::new();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211468,"byte_end":211505,"line_start":333,"line_end":333,"column_start":5,"column_end":42}},{"value":"/ context.insert(\"greeting\", &\"hello\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211510,"byte_end":211551,"line_start":334,"line_end":334,"column_start":5,"column_end":46}},{"value":"/ Tera::one_off(\"{{ greeting }} world\", &context, true);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211556,"byte_end":211614,"line_start":335,"line_end":335,"column_start":5,"column_end":63}},{"value":"/ // Or with a struct that impl Serialize","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211619,"byte_end":211662,"line_start":336,"line_end":336,"column_start":5,"column_end":48}},{"value":"/ Tera::one_off(\"{{ greeting }} world\", &user, true);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211667,"byte_end":211722,"line_start":337,"line_end":337,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":211727,"byte_end":211734,"line_start":338,"line_end":338,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212091,"byte_end":212103,"line_start":351,"line_end":351,"column_start":12,"column_end":24},"name":"get_template","qualname":"<Tera>::get_template","value":"pub fn get_template(&Self, &str) -> Result<&Template>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212070,"byte_end":212079,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212727,"byte_end":212743,"line_start":367,"line_end":367,"column_start":12,"column_end":28},"name":"add_raw_template","qualname":"<Tera>::add_raw_template","value":"pub fn add_raw_template(&mut Self, &str, &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Add a single template to the Tera instance","sig":null,"attributes":[{"value":"/ Add a single template to the Tera instance","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212329,"byte_end":212375,"line_start":358,"line_end":358,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212380,"byte_end":212383,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ This will error if the inheritance chain can't be built, such as adding a child","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212388,"byte_end":212471,"line_start":360,"line_end":360,"column_start":5,"column_end":88}},{"value":"/ template without the parent one.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212476,"byte_end":212512,"line_start":361,"line_end":361,"column_start":5,"column_end":41}},{"value":"/ If you want to add several templates, use [Tera::add_templates](struct.Tera.html#method.add_templates)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212517,"byte_end":212623,"line_start":362,"line_end":362,"column_start":5,"column_end":111}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212628,"byte_end":212631,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212636,"byte_end":212654,"line_start":364,"line_end":364,"column_start":5,"column_end":23}},{"value":"/ tera.add_template(\"new.html\", \"Blabla\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212659,"byte_end":212703,"line_start":365,"line_end":365,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":212708,"byte_end":212715,"line_start":366,"line_end":366,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213440,"byte_end":213457,"line_start":387,"line_end":387,"column_start":12,"column_end":29},"name":"add_raw_templates","qualname":"<Tera>::add_raw_templates","value":"pub fn add_raw_templates(&mut Self, Vec<(&str, &str)>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Add all the templates given to the Tera instance","sig":null,"attributes":[{"value":"/ Add all the templates given to the Tera instance","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213075,"byte_end":213127,"line_start":376,"line_end":376,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213132,"byte_end":213135,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ This will error if the inheritance chain can't be built, such as adding a child","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213140,"byte_end":213223,"line_start":378,"line_end":378,"column_start":5,"column_end":88}},{"value":"/ template without the parent one.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213228,"byte_end":213264,"line_start":379,"line_end":379,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213269,"byte_end":213272,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213277,"byte_end":213295,"line_start":381,"line_end":381,"column_start":5,"column_end":23}},{"value":"/ tera.add_raw_templates(vec![","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213300,"byte_end":213332,"line_start":382,"line_end":382,"column_start":5,"column_end":37}},{"value":"/     (\"new.html\", \"blabla\"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213337,"byte_end":213368,"line_start":383,"line_end":383,"column_start":5,"column_end":36}},{"value":"/     (\"new2.html\", \"hello\"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213373,"byte_end":213404,"line_start":384,"line_end":384,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213409,"byte_end":213416,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213421,"byte_end":213428,"line_start":386,"line_end":386,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214477,"byte_end":214494,"line_start":411,"line_end":411,"column_start":12,"column_end":29},"name":"add_template_file","qualname":"<Tera>::add_template_file","value":"pub fn add_template_file<P: AsRef<Path>>(&mut Self, P, Option<&str>)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Add a single template from a path to the Tera instance. The default name for the template is\n the path given, but this can be renamed with the `name` parameter","sig":null,"attributes":[{"value":"/ Add a single template from a path to the Tera instance. The default name for the template is","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213857,"byte_end":213953,"line_start":398,"line_end":398,"column_start":5,"column_end":101}},{"value":"/ the path given, but this can be renamed with the `name` parameter","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":213958,"byte_end":214027,"line_start":399,"line_end":399,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214032,"byte_end":214035,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ This will error if the inheritance chain can't be built, such as adding a child","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214040,"byte_end":214123,"line_start":401,"line_end":401,"column_start":5,"column_end":88}},{"value":"/ template without the parent one.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214128,"byte_end":214164,"line_start":402,"line_end":402,"column_start":5,"column_end":41}},{"value":"/ If you want to add several file, use [Tera::add_template_files](struct.Tera.html#method.add_template_files)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214169,"byte_end":214280,"line_start":403,"line_end":403,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214285,"byte_end":214288,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214293,"byte_end":214311,"line_start":405,"line_end":405,"column_start":5,"column_end":23}},{"value":"/ // Use path as name","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214316,"byte_end":214339,"line_start":406,"line_end":406,"column_start":5,"column_end":28}},{"value":"/ tera.add_template_file(path, None);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214344,"byte_end":214383,"line_start":407,"line_end":407,"column_start":5,"column_end":44}},{"value":"/ // Rename","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214388,"byte_end":214401,"line_start":408,"line_end":408,"column_start":5,"column_end":18}},{"value":"/ tera.add_template_file(path, Some(\"index\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214406,"byte_end":214453,"line_start":409,"line_end":409,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214458,"byte_end":214465,"line_start":410,"line_end":410,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215286,"byte_end":215304,"line_start":430,"line_end":430,"column_start":12,"column_end":30},"name":"add_template_files","qualname":"<Tera>::add_template_files","value":"pub fn add_template_files<P: AsRef<Path>>(&mut Self, Vec<(P, Option<&str>)>)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Add several templates from paths to the Tera instance. The default name for the template is\n the path given, but this can be renamed with the second parameter of the tuple","sig":null,"attributes":[{"value":"/ Add several templates from paths to the Tera instance. The default name for the template is","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214706,"byte_end":214801,"line_start":418,"line_end":418,"column_start":5,"column_end":100}},{"value":"/ the path given, but this can be renamed with the second parameter of the tuple","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214806,"byte_end":214888,"line_start":419,"line_end":419,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214893,"byte_end":214896,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ This will error if the inheritance chain can't be built, such as adding a child","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214901,"byte_end":214984,"line_start":421,"line_end":421,"column_start":5,"column_end":88}},{"value":"/ template without the parent one.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":214989,"byte_end":215025,"line_start":422,"line_end":422,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215030,"byte_end":215033,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215038,"byte_end":215056,"line_start":424,"line_end":424,"column_start":5,"column_end":23}},{"value":"/ tera.add_template_files(vec![","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215061,"byte_end":215094,"line_start":425,"line_end":425,"column_start":5,"column_end":38}},{"value":"/     (path1, None), // this template will have the value of path1 as name","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215099,"byte_end":215175,"line_start":426,"line_end":426,"column_start":5,"column_end":81}},{"value":"/     (path2, Some(\"hey\")), // this template will have `hey` as name","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215180,"byte_end":215250,"line_start":427,"line_end":427,"column_start":5,"column_end":75}},{"value":"/ ]);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215255,"byte_end":215262,"line_start":428,"line_end":428,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215267,"byte_end":215274,"line_start":429,"line_end":429,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215631,"byte_end":215641,"line_start":444,"line_end":444,"column_start":12,"column_end":22},"name":"get_filter","qualname":"<Tera>::get_filter","value":"pub fn get_filter(&Self, &str) -> Result<&FilterFn>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215610,"byte_end":215619,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216080,"byte_end":216095,"line_start":458,"line_end":458,"column_start":12,"column_end":27},"name":"register_filter","qualname":"<Tera>::register_filter","value":"pub fn register_filter(&mut Self, &str, FilterFn)","parent":null,"children":[],"decl_id":null,"docs":" Register a filter with Tera.","sig":null,"attributes":[{"value":"/ Register a filter with Tera.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215857,"byte_end":215889,"line_start":451,"line_end":451,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215894,"byte_end":215897,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ If a filter with that name already exists, it will be overwritten","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215902,"byte_end":215971,"line_start":453,"line_end":453,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215976,"byte_end":215979,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":215984,"byte_end":216002,"line_start":455,"line_end":455,"column_start":5,"column_end":23}},{"value":"/ tera.register_filter(\"upper\", string::upper);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216007,"byte_end":216056,"line_start":456,"line_end":456,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216061,"byte_end":216068,"line_start":457,"line_end":457,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216245,"byte_end":216255,"line_start":464,"line_end":464,"column_start":12,"column_end":22},"name":"get_tester","qualname":"<Tera>::get_tester","value":"pub fn get_tester(&Self, &str) -> Result<&TesterFn>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216224,"byte_end":216233,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216687,"byte_end":216702,"line_start":478,"line_end":478,"column_start":12,"column_end":27},"name":"register_tester","qualname":"<Tera>::register_tester","value":"pub fn register_tester(&mut Self, &str, TesterFn)","parent":null,"children":[],"decl_id":null,"docs":" Register a tester with Tera.","sig":null,"attributes":[{"value":"/ Register a tester with Tera.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216467,"byte_end":216499,"line_start":471,"line_end":471,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216504,"byte_end":216507,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ If a tester with that name already exists, it will be overwritten","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216512,"byte_end":216581,"line_start":473,"line_end":473,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216586,"byte_end":216589,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216594,"byte_end":216612,"line_start":475,"line_end":475,"column_start":5,"column_end":23}},{"value":"/ tera.register_tester(\"odd\", testers::odd);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216617,"byte_end":216663,"line_start":476,"line_end":476,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216668,"byte_end":216675,"line_start":477,"line_end":477,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216926,"byte_end":216945,"line_start":485,"line_end":485,"column_start":12,"column_end":31},"name":"get_global_function","qualname":"<Tera>::get_global_function","value":"pub fn get_global_function(&Self, &str) -> Result<&GlobalFn>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216831,"byte_end":216840,"line_start":483,"line_end":483,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"0.11.16\", note = \"Use `get_function` instead\")","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":216845,"byte_end":216914,"line_start":484,"line_end":484,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217203,"byte_end":217215,"line_start":494,"line_end":494,"column_start":12,"column_end":24},"name":"get_function","qualname":"<Tera>::get_function","value":"pub fn get_function(&Self, &str) -> Result<&GlobalFn>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217182,"byte_end":217191,"line_start":493,"line_end":493,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217753,"byte_end":217777,"line_start":508,"line_end":508,"column_start":12,"column_end":36},"name":"register_global_function","qualname":"<Tera>::register_global_function","value":"pub fn register_global_function(&mut Self, &str, GlobalFn)","parent":null,"children":[],"decl_id":null,"docs":" Register a global function with Tera.","sig":null,"attributes":[{"value":"/ Register a global function with Tera.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217432,"byte_end":217473,"line_start":500,"line_end":500,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217478,"byte_end":217481,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ If a global function with that name already exists, it will be overwritten","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217486,"byte_end":217564,"line_start":502,"line_end":502,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217569,"byte_end":217572,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217577,"byte_end":217595,"line_start":504,"line_end":504,"column_start":5,"column_end":23}},{"value":"/ tera.register_global_function(\"range\", range);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217600,"byte_end":217650,"line_start":505,"line_end":505,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217655,"byte_end":217662,"line_start":506,"line_end":506,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"0.11.16\", note = \"Use `register_function` instead\")","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217667,"byte_end":217741,"line_start":507,"line_end":507,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":218121,"byte_end":218138,"line_start":519,"line_end":519,"column_start":12,"column_end":29},"name":"register_function","qualname":"<Tera>::register_function","value":"pub fn register_function(&mut Self, &str, GlobalFn)","parent":null,"children":[],"decl_id":null,"docs":" Register a function with Tera.","sig":null,"attributes":[{"value":"/ Register a function with Tera.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217900,"byte_end":217934,"line_start":512,"line_end":512,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217939,"byte_end":217942,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ If a function with that name already exists, it will be overwritten","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":217947,"byte_end":218018,"line_start":514,"line_end":514,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":218023,"byte_end":218026,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":218031,"byte_end":218049,"line_start":516,"line_end":516,"column_start":5,"column_end":23}},{"value":"/ tera.register_function(\"range\", range);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":218054,"byte_end":218097,"line_start":517,"line_end":517,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":218102,"byte_end":218109,"line_start":518,"line_end":518,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221546,"byte_end":221559,"line_start":594,"line_end":594,"column_start":12,"column_end":25},"name":"autoescape_on","qualname":"<Tera>::autoescape_on","value":"pub fn autoescape_on(&mut Self, Vec<&'static str>)","parent":null,"children":[],"decl_id":null,"docs":" Select which suffix(es) to automatically do HTML escaping on,\n`[\".html\", \".htm\", \".xml\"]` by default.","sig":null,"attributes":[{"value":"/ Select which suffix(es) to automatically do HTML escaping on,","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221123,"byte_end":221188,"line_start":582,"line_end":582,"column_start":5,"column_end":70}},{"value":"/`[\".html\", \".htm\", \".xml\"]` by default.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221193,"byte_end":221235,"line_start":583,"line_end":583,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221240,"byte_end":221243,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Only call this function if you wish to change the defaults.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221248,"byte_end":221311,"line_start":585,"line_end":585,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221316,"byte_end":221319,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221324,"byte_end":221327,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/```ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221332,"byte_end":221344,"line_start":588,"line_end":588,"column_start":5,"column_end":17}},{"value":"/ // escape only files ending with `.php.html`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221349,"byte_end":221397,"line_start":589,"line_end":589,"column_start":5,"column_end":53}},{"value":"/ tera.autoescape_on(vec![\".php.html\"]);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221402,"byte_end":221444,"line_start":590,"line_end":590,"column_start":5,"column_end":47}},{"value":"/ // disable autoescaping completely","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221449,"byte_end":221487,"line_start":591,"line_end":591,"column_start":5,"column_end":43}},{"value":"/ tera.autoescape_on(vec![]);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221492,"byte_end":221523,"line_start":592,"line_end":592,"column_start":5,"column_end":36}},{"value":"/```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221528,"byte_end":221534,"line_start":593,"line_end":593,"column_start":5,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221698,"byte_end":221711,"line_start":600,"line_end":600,"column_start":12,"column_end":25},"name":"get_escape_fn","qualname":"<Tera>::get_escape_fn","value":"pub fn get_escape_fn(&Self) -> &EscapeFn","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221677,"byte_end":221686,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222360,"byte_end":222373,"line_start":618,"line_end":618,"column_start":12,"column_end":25},"name":"set_escape_fn","qualname":"<Tera>::set_escape_fn","value":"pub fn set_escape_fn(&mut Self, EscapeFn)","parent":null,"children":[],"decl_id":null,"docs":" Set user-defined function which applied to a rendered content.","sig":null,"attributes":[{"value":"/ Set user-defined function which applied to a rendered content.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221769,"byte_end":221835,"line_start":604,"line_end":604,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221840,"byte_end":221843,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221848,"byte_end":221865,"line_start":606,"line_end":606,"column_start":5,"column_end":22}},{"value":"/ fn escape_c_string(input: &str) -> String { ... }","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221870,"byte_end":221923,"line_start":607,"line_end":607,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221928,"byte_end":221931,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ // make valid C string literal","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221936,"byte_end":221970,"line_start":609,"line_end":609,"column_start":5,"column_end":39}},{"value":"/ tera.set_escape_fn(escape_c_string);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":221975,"byte_end":222015,"line_start":610,"line_end":610,"column_start":5,"column_end":45}},{"value":"/ tera.add_raw_template(\"foo\", \"\\\"{{ content }}\\\"\").unwrap();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222020,"byte_end":222083,"line_start":611,"line_end":611,"column_start":5,"column_end":68}},{"value":"/ tera.autoescape_on(vec![\"foo\"]);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222088,"byte_end":222124,"line_start":612,"line_end":612,"column_start":5,"column_end":41}},{"value":"/ let mut context = Context::new();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222129,"byte_end":222166,"line_start":613,"line_end":613,"column_start":5,"column_end":42}},{"value":"/ context.insert(\"content\", &\"Hello\\n\\'world\\\"!\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222171,"byte_end":222223,"line_start":614,"line_end":614,"column_start":5,"column_end":57}},{"value":"/ let result = tera.render(\"foo\", &context).unwrap();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222228,"byte_end":222283,"line_start":615,"line_end":615,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(result, r#\"\"Hello\\n\\'world\\\"!\"\"#);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222288,"byte_end":222337,"line_start":616,"line_end":616,"column_start":5,"column_end":54}},{"value":"/```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222342,"byte_end":222348,"line_start":617,"line_end":617,"column_start":5,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222522,"byte_end":222537,"line_start":623,"line_end":623,"column_start":12,"column_end":27},"name":"reset_escape_fn","qualname":"<Tera>::reset_escape_fn","value":"pub fn reset_escape_fn(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset escape function to default `tera::escape_html`.\n","sig":null,"attributes":[{"value":"/ Reset escape function to default `tera::escape_html`.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222453,"byte_end":222510,"line_start":622,"line_end":622,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222978,"byte_end":222989,"line_start":633,"line_end":633,"column_start":12,"column_end":23},"name":"full_reload","qualname":"<Tera>::full_reload","value":"pub fn full_reload(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Re-parse all templates found in the glob given to Tera\n Use this when you are watching a directory and want to reload everything,\n for example when a file is added.","sig":null,"attributes":[{"value":"/ Re-parse all templates found in the glob given to Tera","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222600,"byte_end":222658,"line_start":627,"line_end":627,"column_start":5,"column_end":63}},{"value":"/ Use this when you are watching a directory and want to reload everything,","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222663,"byte_end":222740,"line_start":628,"line_end":628,"column_start":5,"column_end":82}},{"value":"/ for example when a file is added.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222745,"byte_end":222782,"line_start":629,"line_end":629,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222787,"byte_end":222790,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ If you are adding templates without using a glob, we can't know when a template","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222795,"byte_end":222878,"line_start":631,"line_end":631,"column_start":5,"column_end":88}},{"value":"/ is deleted, which would result in an error if we are trying to reload that file","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":222883,"byte_end":222966,"line_start":632,"line_end":632,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223726,"byte_end":223732,"line_start":653,"line_end":653,"column_start":12,"column_end":18},"name":"extend","qualname":"<Tera>::extend","value":"pub fn extend(&mut Self, &Tera) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Use that method when you want to add a given Tera instance templates/filters/testers\n to your own. If a template/filter/tester with the same name already exists in your instance,\n it will not be overwritten.","sig":null,"attributes":[{"value":"/ Use that method when you want to add a given Tera instance templates/filters/testers","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223274,"byte_end":223362,"line_start":644,"line_end":644,"column_start":5,"column_end":93}},{"value":"/ to your own. If a template/filter/tester with the same name already exists in your instance,","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223367,"byte_end":223463,"line_start":645,"line_end":645,"column_start":5,"column_end":101}},{"value":"/ it will not be overwritten.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223468,"byte_end":223499,"line_start":646,"line_end":646,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223504,"byte_end":223507,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/```rust,ignore","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223512,"byte_end":223529,"line_start":648,"line_end":648,"column_start":5,"column_end":22}},{"value":"/ // add all the templates from FRAMEWORK_TERA","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223534,"byte_end":223582,"line_start":649,"line_end":649,"column_start":5,"column_end":53}},{"value":"/ // except the ones that have an identical name to the ones in `my_tera`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223587,"byte_end":223662,"line_start":650,"line_end":650,"column_start":5,"column_end":80}},{"value":"/ my_tera.extend(&FRAMEWORK_TERA);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223667,"byte_end":223703,"line_start":651,"line_end":651,"column_start":5,"column_end":41}},{"value":"/```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":223708,"byte_end":223714,"line_start":652,"line_end":652,"column_start":5,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":611},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236274,"byte_end":236285,"line_start":18,"line_end":18,"column_start":8,"column_end":19},"name":"escape_html","qualname":"::utils::escape_html","value":"pub fn escape_html(&str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escape HTML following [OWASP](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)","sig":null,"attributes":[{"value":"/ Escape HTML following [OWASP](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":235527,"byte_end":235643,"line_start":1,"line_end":1,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":235644,"byte_end":235647,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Escape the following characters with HTML entity encoding to prevent switching","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":235648,"byte_end":235730,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/ into any execution context, such as script, style, or event handlers. Using","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":235731,"byte_end":235810,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ hex entities is recommended in the spec. In addition to the 5 characters","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":235811,"byte_end":235887,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ significant in XML (&, <, >, \", '), the forward slash is included as it helps","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":235888,"byte_end":235969,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/ to end an HTML entity.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":235970,"byte_end":235996,"line_start":7,"line_end":7,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":235997,"byte_end":236000,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236001,"byte_end":236012,"line_start":9,"line_end":9,"column_start":1,"column_end":12}},{"value":"/ & --> &amp;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236013,"byte_end":236028,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/ < --> &lt;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236029,"byte_end":236043,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/ > --> &gt;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236044,"byte_end":236058,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/ \" --> &quot;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236059,"byte_end":236075,"line_start":13,"line_end":13,"column_start":1,"column_end":17}},{"value":"/ ' --> &#x27;     &apos; is not recommended","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236076,"byte_end":236122,"line_start":14,"line_end":14,"column_start":1,"column_end":47}},{"value":"/ / --> &#x2F;     forward slash is included as it helps end an HTML entity","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236123,"byte_end":236200,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236201,"byte_end":236208,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/utils.rs","byte_start":236209,"byte_end":236218,"line_start":17,"line_end":17,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/filters/string.rs","byte_start":40805,"byte_end":40817,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/filters/string.rs","byte_start":40952,"byte_end":40964,"line_start":127,"line_end":127,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69304,"byte_end":69311,"line_start":19,"line_end":19,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70833,"byte_end":70840,"line_start":67,"line_end":67,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70924,"byte_end":70931,"line_start":73,"line_end":73,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":71348,"byte_end":71353,"line_start":89,"line_end":89,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":72238,"byte_end":72243,"line_start":118,"line_end":118,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":72524,"byte_end":72529,"line_start":132,"line_end":132,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113113,"byte_end":113115,"line_start":13,"line_end":13,"column_start":18,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113406,"byte_end":113418,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114073,"byte_end":114086,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116494,"byte_end":116498,"line_start":160,"line_end":160,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/call_stack.rs","byte_start":132247,"byte_end":132258,"line_start":19,"line_end":19,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/call_stack.rs","byte_start":132877,"byte_end":132886,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/for_loop.rs","byte_start":140557,"byte_end":140570,"line_start":36,"line_end":36,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/for_loop.rs","byte_start":142263,"byte_end":142270,"line_start":79,"line_end":79,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/macros.rs","byte_start":146068,"byte_end":146083,"line_start":22,"line_end":22,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/processor.rs","byte_start":153922,"byte_end":153931,"line_start":114,"line_end":114,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/stack_frame.rs","byte_start":185116,"byte_end":185126,"line_start":60,"line_end":60,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/mod.rs","byte_start":129098,"byte_end":129106,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":189969,"byte_end":189979,"line_start":8,"line_end":8,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190168,"byte_end":190178,"line_start":18,"line_end":18,"column_start":13,"column_end":23},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190196,"byte_end":190206,"line_start":20,"line_end":20,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190573,"byte_end":190583,"line_start":34,"line_end":34,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190946,"byte_end":190952,"line_start":47,"line_end":47,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":191182,"byte_end":191190,"line_start":55,"line_end":55,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":487}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":191612,"byte_end":191621,"line_start":72,"line_end":72,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":192137,"byte_end":192146,"line_start":90,"line_end":90,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":504},{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194843,"byte_end":194851,"line_start":45,"line_end":45,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":200034,"byte_end":200038,"line_start":43,"line_end":43,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":566},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":224525,"byte_end":224529,"line_start":679,"line_end":679,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":225120,"byte_end":225124,"line_start":699,"line_end":699,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/mod.rs","byte_start":74494,"byte_end":74497,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":217}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/filters/string.rs","byte_start":40805,"byte_end":40817,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/builtins/filters/string.rs","byte_start":40952,"byte_end":40964,"line_start":127,"line_end":127,"column_start":20,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":652},"to":{"krate":58,"index":8}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":69304,"byte_end":69311,"line_start":19,"line_end":19,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":657},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70833,"byte_end":70840,"line_start":67,"line_end":67,"column_start":18,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":657},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":70924,"byte_end":70931,"line_start":73,"line_end":73,"column_start":20,"column_end":27},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":657},"to":{"krate":21,"index":1761}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":71348,"byte_end":71353,"line_start":89,"line_end":89,"column_start":22,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":23,"index":2203},"to":{"krate":0,"index":192}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":72238,"byte_end":72243,"line_start":118,"line_end":118,"column_start":22,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":23,"index":2203},"to":{"krate":0,"index":196}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/context.rs","byte_start":72524,"byte_end":72529,"line_start":132,"line_end":132,"column_start":22,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":23,"index":2203},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113113,"byte_end":113115,"line_start":13,"line_end":13,"column_start":18,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1946},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":113406,"byte_end":113418,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1958},"to":{"krate":2,"index":7025}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":114073,"byte_end":114086,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1977},"to":{"krate":2,"index":7025}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/parser/ast.rs","byte_start":116494,"byte_end":116498,"line_start":160,"line_end":160,"column_start":6,"column_end":10},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/call_stack.rs","byte_start":132247,"byte_end":132258,"line_start":19,"line_end":19,"column_start":10,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/call_stack.rs","byte_start":132877,"byte_end":132886,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/for_loop.rs","byte_start":140557,"byte_end":140570,"line_start":36,"line_end":36,"column_start":10,"column_end":23},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/for_loop.rs","byte_start":142263,"byte_end":142270,"line_start":79,"line_end":79,"column_start":10,"column_end":17},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/macros.rs","byte_start":146068,"byte_end":146083,"line_start":22,"line_end":22,"column_start":10,"column_end":25},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/processor.rs","byte_start":153922,"byte_end":153931,"line_start":114,"line_end":114,"column_start":10,"column_end":19},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/stack_frame.rs","byte_start":185116,"byte_end":185126,"line_start":60,"line_end":60,"column_start":10,"column_end":20},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/renderer/mod.rs","byte_start":129098,"byte_end":129106,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":189969,"byte_end":189979,"line_start":8,"line_end":8,"column_start":6,"column_end":16},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190168,"byte_end":190178,"line_start":18,"line_end":18,"column_start":13,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2409},"to":{"krate":2,"index":1867}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190196,"byte_end":190206,"line_start":20,"line_end":20,"column_start":14,"column_end":24},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2409},"to":{"krate":2,"index":1894}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190478,"byte_end":190481,"line_start":30,"line_end":30,"column_start":23,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1894},"to":{"krate":0,"index":475}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190484,"byte_end":190489,"line_start":30,"line_end":30,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2150},"to":{"krate":0,"index":475}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190492,"byte_end":190497,"line_start":30,"line_end":30,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":1834},"to":{"krate":0,"index":475}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190573,"byte_end":190583,"line_start":34,"line_end":34,"column_start":21,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2409},"to":{"krate":0,"index":475}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":190946,"byte_end":190952,"line_start":47,"line_end":47,"column_start":21,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":5,"index":5898},"to":{"krate":0,"index":475}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":191182,"byte_end":191190,"line_start":55,"line_end":55,"column_start":21,"column_end":29},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2423},"to":{"krate":0,"index":475}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":191612,"byte_end":191621,"line_start":72,"line_end":72,"column_start":21,"column_end":30},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2442},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/sort_utils.rs","byte_start":192137,"byte_end":192146,"line_start":90,"line_end":90,"column_start":38,"column_end":47},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2442},"to":{"krate":0,"index":499}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/template.rs","byte_start":194843,"byte_end":194851,"line_start":45,"line_end":45,"column_start":6,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":200034,"byte_end":200038,"line_start":43,"line_end":43,"column_start":6,"column_end":10},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":224525,"byte_end":224529,"line_start":679,"line_end":679,"column_start":18,"column_end":22},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":550},"to":{"krate":2,"index":2133}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/tera-0.11.20/src/tera.rs","byte_start":225120,"byte_end":225124,"line_start":699,"line_end":699,"column_start":21,"column_end":25},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":550},"to":{"krate":2,"index":7020}}]}