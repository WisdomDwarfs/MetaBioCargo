{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0","program":"/home/deltalab/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","unic_segment","/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=39657bdc1ca4f685","-C","extra-filename=-39657bdc1ca4f685","--out-dir","/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps","-L","dependency=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps","--extern","unic_ucd_segment=/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libunic_ucd_segment-65148b990aba3add.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/deltalab/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/deltalab/Projects/MetaBioCargo/biocargo/target/rls/debug/deps/libunic_segment-39657bdc1ca4f685.rmeta"},"prelude":{"crate_id":{"name":"unic_segment","disambiguator":[10858625847277137361,7608231375346669555]},"crate_root":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src","external_crates":[{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16444769200449299423,17751526912405478841]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4150165762619742282,10084428854705346699]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17154149902455954331,10787439630250540476]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3551889228217061522,18098948565341830907]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[616005194320102788,15921775685612583979]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16641574387685737100,7292927880071586320]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10423320894468080309,10477758161385623276]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15680994173287911211,8587509387955096358]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6787535578940220623,17568269130839787030]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17594861313346837805,7275947389262704147]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11399954785695891892,14851098529173350963]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[12494985972155115308,9730871930189483612]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15532488949252110002,6117296861090759943]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[1804911290426314532,6689449841577915250]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[8479710970850627223,6852362994577870122]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[12659285667184348883,16807697831197910537]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[12098761462721718681,17445864288247971786]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":18,"id":{"name":"unic_ucd_segment","disambiguator":[13886172372643658229,12560756265361082432]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":19,"id":{"name":"unic_char_property","disambiguator":[4289130501732457943,4003424052354220006]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":20,"id":{"name":"unic_char_range","disambiguator":[9912203379220226979,14244668770074356807]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":21,"id":{"name":"unic_ucd_version","disambiguator":[10969464922499600391,13179520886208194387]}},{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","num":22,"id":{"name":"unic_common","disambiguator":[14767140665566241569,9681423043299843281]}}],"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":481,"byte_end":2874,"line_start":12,"line_end":89,"column_start":1,"column_end":53}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":55},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2620,"byte_end":2635,"line_start":80,"line_end":80,"column_start":27,"column_end":42},"alias_span":null,"name":"UNICODE_VERSION","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2671,"byte_end":2686,"line_start":83,"line_end":83,"column_start":20,"column_end":35},"alias_span":null,"name":"PKG_DESCRIPTION","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":7},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2688,"byte_end":2696,"line_start":83,"line_end":83,"column_start":37,"column_end":45},"alias_span":null,"name":"PKG_NAME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2698,"byte_end":2709,"line_start":83,"line_end":83,"column_start":47,"column_end":58},"alias_span":null,"name":"PKG_VERSION","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":161},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2746,"byte_end":2760,"line_start":86,"line_end":86,"column_start":20,"column_end":34},"alias_span":null,"name":"GraphemeCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":173},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2762,"byte_end":2780,"line_start":86,"line_end":86,"column_start":36,"column_end":54},"alias_span":null,"name":"GraphemeIncomplete","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":127},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2782,"byte_end":2797,"line_start":86,"line_end":86,"column_start":56,"column_end":71},"alias_span":null,"name":"GraphemeIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":134},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2799,"byte_end":2808,"line_start":86,"line_end":86,"column_start":73,"column_end":82},"alias_span":null,"name":"Graphemes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2837,"byte_end":2853,"line_start":89,"line_end":89,"column_start":16,"column_end":32},"alias_span":null,"name":"WordBoundIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2855,"byte_end":2865,"line_start":89,"line_end":89,"column_start":34,"column_end":44},"alias_span":null,"name":"WordBounds","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":74},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2867,"byte_end":2872,"line_start":89,"line_end":89,"column_start":46,"column_end":51},"alias_span":null,"name":"Words","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":481,"byte_end":2874,"line_start":12,"line_end":89,"column_start":1,"column_end":53},"name":"","qualname":"::","value":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"decl_id":null,"docs":" # UNIC — Unicode Text Segmentation Algorithms","sig":null,"attributes":[{"value":"/ # UNIC — Unicode Text Segmentation Algorithms","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":481,"byte_end":532,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":533,"byte_end":536,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ A component of [`unic`: Unicode and Internationalization Crates for Rust](/unic/).","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":537,"byte_end":623,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":624,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This UNIC component implements algorithms from [Unicode® Standard Annex #29 -","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":628,"byte_end":710,"line_start":16,"line_end":16,"column_start":1,"column_end":82}},{"value":"/ Unicode Text Segmentation](http://unicode.org/reports/tr29/), used for detecting","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":711,"byte_end":795,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/ boundaries of text element boundaries, such as user-perceived characters (a.k.a.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":796,"byte_end":880,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ *Grapheme Clusters)*, *Words*, and *Sentences* (last one not implemented yet).","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":881,"byte_end":963,"line_start":19,"line_end":19,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":964,"byte_end":967,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":968,"byte_end":982,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":983,"byte_end":986,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":987,"byte_end":998,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ # use unic_segment::{GraphemeIndices, Graphemes, WordBoundIndices, WordBounds, Words};","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":999,"byte_end":1089,"line_start":24,"line_end":24,"column_start":1,"column_end":91}},{"value":"/ assert_eq!(","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1090,"byte_end":1105,"line_start":25,"line_end":25,"column_start":1,"column_end":16}},{"value":"/     Graphemes::new(\"a\\u{310}e\\u{301}o\\u{308}\\u{332}\").collect::<Vec<&str>>(),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1106,"byte_end":1187,"line_start":26,"line_end":26,"column_start":1,"column_end":82}},{"value":"/     &[\"a\\u{310}\", \"e\\u{301}\", \"o\\u{308}\\u{332}\"]","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1188,"byte_end":1240,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/ );","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1241,"byte_end":1247,"line_start":28,"line_end":28,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1248,"byte_end":1251,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1252,"byte_end":1267,"line_start":30,"line_end":30,"column_start":1,"column_end":16}},{"value":"/     Graphemes::new(\"a\\r\\nb🇺🇳🇮🇨\").collect::<Vec<&str>>(),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1268,"byte_end":1340,"line_start":31,"line_end":31,"column_start":1,"column_end":61}},{"value":"/     &[\"a\", \"\\r\\n\", \"b\", \"🇺🇳\", \"🇮🇨\"]","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1341,"byte_end":1392,"line_start":32,"line_end":32,"column_start":1,"column_end":40}},{"value":"/ );","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1393,"byte_end":1399,"line_start":33,"line_end":33,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1400,"byte_end":1403,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1404,"byte_end":1419,"line_start":35,"line_end":35,"column_start":1,"column_end":16}},{"value":"/     GraphemeIndices::new(\"a̐éö̲\\r\\n\").collect::<Vec<(usize, &str)>>(),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1420,"byte_end":1500,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/     &[(0, \"a̐\"), (3, \"é\"), (6, \"ö̲\"), (11, \"\\r\\n\")]","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1501,"byte_end":1562,"line_start":37,"line_end":37,"column_start":1,"column_end":58}},{"value":"/ );","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1563,"byte_end":1569,"line_start":38,"line_end":38,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1570,"byte_end":1573,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ fn has_alphanumeric(s: &&str) -> bool {","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1574,"byte_end":1617,"line_start":40,"line_end":40,"column_start":1,"column_end":44}},{"value":"/     s.chars().any(|ch| ch.is_alphanumeric())","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1618,"byte_end":1666,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ }","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1667,"byte_end":1672,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1673,"byte_end":1676,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1677,"byte_end":1692,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/     Words::new(","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1693,"byte_end":1712,"line_start":45,"line_end":45,"column_start":1,"column_end":20}},{"value":"/         \"The quick (\\\"brown\\\") fox can't jump 32.3 feet, right?\",","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1713,"byte_end":1782,"line_start":46,"line_end":46,"column_start":1,"column_end":70}},{"value":"/         has_alphanumeric,","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1783,"byte_end":1812,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/     ).collect::<Vec<&str>>(),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1813,"byte_end":1846,"line_start":48,"line_end":48,"column_start":1,"column_end":34}},{"value":"/     &[\"The\", \"quick\", \"brown\", \"fox\", \"can't\", \"jump\", \"32.3\", \"feet\", \"right\"]","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1847,"byte_end":1930,"line_start":49,"line_end":49,"column_start":1,"column_end":84}},{"value":"/ );","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1931,"byte_end":1937,"line_start":50,"line_end":50,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1938,"byte_end":1941,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1942,"byte_end":1957,"line_start":52,"line_end":52,"column_start":1,"column_end":16}},{"value":"/     WordBounds::new(\"The quick (\\\"brown\\\")  fox\").collect::<Vec<&str>>(),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":1958,"byte_end":2035,"line_start":53,"line_end":53,"column_start":1,"column_end":78}},{"value":"/     &[\"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\", \" \", \" \", \"fox\"]","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2036,"byte_end":2119,"line_start":54,"line_end":54,"column_start":1,"column_end":84}},{"value":"/ );","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2120,"byte_end":2126,"line_start":55,"line_end":55,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2127,"byte_end":2130,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2131,"byte_end":2146,"line_start":57,"line_end":57,"column_start":1,"column_end":16}},{"value":"/     WordBoundIndices::new(\"Brr, it's 29.3°F!\").collect::<Vec<(usize, &str)>>(),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2147,"byte_end":2231,"line_start":58,"line_end":58,"column_start":1,"column_end":84}},{"value":"/     &[","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2232,"byte_end":2242,"line_start":59,"line_end":59,"column_start":1,"column_end":11}},{"value":"/         (0, \"Brr\"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2243,"byte_end":2266,"line_start":60,"line_end":60,"column_start":1,"column_end":24}},{"value":"/         (3, \",\"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2267,"byte_end":2288,"line_start":61,"line_end":61,"column_start":1,"column_end":22}},{"value":"/         (4, \" \"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2289,"byte_end":2310,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/         (5, \"it's\"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2311,"byte_end":2335,"line_start":63,"line_end":63,"column_start":1,"column_end":25}},{"value":"/         (9, \" \"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2336,"byte_end":2357,"line_start":64,"line_end":64,"column_start":1,"column_end":22}},{"value":"/         (10, \"29.3\"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2358,"byte_end":2383,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/         (14, \"°\"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2384,"byte_end":2407,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/         (16, \"F\"),","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2408,"byte_end":2430,"line_start":67,"line_end":67,"column_start":1,"column_end":23}},{"value":"/         (17, \"!\")","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2431,"byte_end":2452,"line_start":68,"line_end":68,"column_start":1,"column_end":22}},{"value":"/     ]","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2453,"byte_end":2462,"line_start":69,"line_end":69,"column_start":1,"column_end":10}},{"value":"/ );","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2463,"byte_end":2469,"line_start":70,"line_end":70,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2470,"byte_end":2477,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"forbid(unsafe_code, missing_docs)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/lib.rs","byte_start":2479,"byte_end":2516,"line_start":73,"line_end":73,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":6},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/pkg_info.rs","byte_start":3368,"byte_end":3379,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"PKG_VERSION","qualname":"::pkg_info::PKG_VERSION","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" UNIC component version.\n","sig":null,"attributes":[{"value":"/ UNIC component version.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/pkg_info.rs","byte_start":3330,"byte_end":3357,"line_start":13,"line_end":13,"column_start":1,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":7},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/pkg_info.rs","byte_start":3451,"byte_end":3459,"line_start":17,"line_end":17,"column_start":11,"column_end":19},"name":"PKG_NAME","qualname":"::pkg_info::PKG_NAME","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" UNIC component name.\n","sig":null,"attributes":[{"value":"/ UNIC component name.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/pkg_info.rs","byte_start":3416,"byte_end":3440,"line_start":16,"line_end":16,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":8},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/pkg_info.rs","byte_start":3535,"byte_end":3550,"line_start":20,"line_end":20,"column_start":11,"column_end":26},"name":"PKG_DESCRIPTION","qualname":"::pkg_info::PKG_DESCRIPTION","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" UNIC component description.\n","sig":null,"attributes":[{"value":"/ UNIC component description.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/pkg_info.rs","byte_start":3493,"byte_end":3524,"line_start":19,"line_end":19,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":127},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4373,"byte_end":4388,"line_start":24,"line_end":24,"column_start":12,"column_end":27},"name":"GraphemeIndices","qualname":"::grapheme::GraphemeIndices","value":"GraphemeIndices {  }","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130}],"decl_id":null,"docs":" External iterator for grapheme clusters and byte offsets.\n","sig":null,"attributes":[{"value":"/ External iterator for grapheme clusters and byte offsets.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4283,"byte_end":4344,"line_start":22,"line_end":22,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4566,"byte_end":4569,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"new","qualname":"<GraphemeIndices>::new","value":"pub fn new<'b>(&'b str) -> GraphemeIndices","parent":null,"children":[],"decl_id":null,"docs":" Create new iterator for *extended grapheme clusters*.\n","sig":null,"attributes":[{"value":"/ Create new iterator for *extended grapheme clusters*.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4483,"byte_end":4540,"line_start":30,"line_end":30,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4545,"byte_end":4554,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4823,"byte_end":4833,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"new_legacy","qualname":"<GraphemeIndices>::new_legacy","value":"pub fn new_legacy<'b>(&'b str) -> GraphemeIndices","parent":null,"children":[],"decl_id":null,"docs":" Create new iterator for *legacy grapheme clusters*.\n","sig":null,"attributes":[{"value":"/ Create new iterator for *legacy grapheme clusters*.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4742,"byte_end":4797,"line_start":39,"line_end":39,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4802,"byte_end":4811,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5450,"byte_end":5456,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"as_str","qualname":"<GraphemeIndices>::as_str","value":"pub fn as_str(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data (the part yet to be iterated) as a slice of the original string.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5013,"byte_end":5022,"line_start":48,"line_end":48,"column_start":5,"column_end":14}},{"value":"/ View the underlying data (the part yet to be iterated) as a slice of the original string.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5027,"byte_end":5120,"line_start":49,"line_end":49,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5125,"byte_end":5128,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5133,"byte_end":5144,"line_start":51,"line_end":51,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::GraphemeIndices;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5149,"byte_end":5189,"line_start":52,"line_end":52,"column_start":5,"column_end":45}},{"value":"/ let mut iter = GraphemeIndices::new(\"abc\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5194,"byte_end":5241,"line_start":53,"line_end":53,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(iter.as_str(), \"abc\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5246,"byte_end":5283,"line_start":54,"line_end":54,"column_start":5,"column_end":42}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5288,"byte_end":5304,"line_start":55,"line_end":55,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(iter.as_str(), \"bc\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5309,"byte_end":5345,"line_start":56,"line_end":56,"column_start":5,"column_end":41}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5350,"byte_end":5366,"line_start":57,"line_end":57,"column_start":5,"column_end":21}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5371,"byte_end":5387,"line_start":58,"line_end":58,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(iter.as_str(), \"\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5392,"byte_end":5426,"line_start":59,"line_end":59,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5431,"byte_end":5438,"line_start":60,"line_end":60,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":134},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6279,"byte_end":6288,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"Graphemes","qualname":"::grapheme::Graphemes","value":"Graphemes {  }","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"decl_id":null,"docs":" External iterator for a string's\n [grapheme clusters](https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).\n","sig":null,"attributes":[{"value":"/ External iterator for a string's","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6122,"byte_end":6158,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/ [grapheme clusters](https://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6159,"byte_end":6250,"line_start":92,"line_end":92,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6492,"byte_end":6495,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<Graphemes>::new","value":"pub fn new<'b>(&'b str) -> Graphemes","parent":null,"children":[],"decl_id":null,"docs":" Create new iterator for *extended grapheme clusters*.\n","sig":null,"attributes":[{"value":"/ Create new iterator for *extended grapheme clusters*.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6409,"byte_end":6466,"line_start":101,"line_end":101,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6471,"byte_end":6480,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6808,"byte_end":6818,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"new_legacy","qualname":"<Graphemes>::new_legacy","value":"pub fn new_legacy<'b>(&'b str) -> Graphemes","parent":null,"children":[],"decl_id":null,"docs":" Create new iterator for *legacy grapheme clusters*.\n","sig":null,"attributes":[{"value":"/ Create new iterator for *legacy grapheme clusters*.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6727,"byte_end":6782,"line_start":112,"line_end":112,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6787,"byte_end":6796,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7489,"byte_end":7495,"line_start":136,"line_end":136,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Graphemes>::as_str","value":"pub fn as_str(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data (the part yet to be iterated) as a slice of the original string.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7064,"byte_end":7073,"line_start":123,"line_end":123,"column_start":5,"column_end":14}},{"value":"/ View the underlying data (the part yet to be iterated) as a slice of the original string.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7078,"byte_end":7171,"line_start":124,"line_end":124,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7176,"byte_end":7179,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7184,"byte_end":7195,"line_start":126,"line_end":126,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::Graphemes;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7200,"byte_end":7234,"line_start":127,"line_end":127,"column_start":5,"column_end":39}},{"value":"/ let mut iter = Graphemes::new(\"abc\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7239,"byte_end":7280,"line_start":128,"line_end":128,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(iter.as_str(), \"abc\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7285,"byte_end":7322,"line_start":129,"line_end":129,"column_start":5,"column_end":42}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7327,"byte_end":7343,"line_start":130,"line_end":130,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(iter.as_str(), \"bc\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7348,"byte_end":7384,"line_start":131,"line_end":131,"column_start":5,"column_end":41}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7389,"byte_end":7405,"line_start":132,"line_end":132,"column_start":5,"column_end":21}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7410,"byte_end":7426,"line_start":133,"line_end":133,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(iter.as_str(), \"\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7431,"byte_end":7465,"line_start":134,"line_end":134,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7470,"byte_end":7477,"line_start":135,"line_end":135,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":161},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":9273,"byte_end":9287,"line_start":196,"line_end":196,"column_start":12,"column_end":26},"name":"GraphemeCursor","qualname":"::grapheme::GraphemeCursor","value":"GraphemeCursor {  }","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"decl_id":null,"docs":" Cursor-based segmenter for grapheme clusters.\n","sig":null,"attributes":[{"value":"/ Cursor-based segmenter for grapheme clusters.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":9195,"byte_end":9244,"line_start":194,"line_end":194,"column_start":1,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":174},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10861,"byte_end":10871,"line_start":236,"line_end":236,"column_start":5,"column_end":15},"name":"PreContext","qualname":"::grapheme::GraphemeIncomplete::PreContext","value":"GraphemeIncomplete::PreContext(usize)","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" More pre-context is needed. The caller should call `provide_context`\n with a chunk ending at the offset given, then retry the query. This\n will only be returned if the `chunk_start` parameter is nonzero.\n","sig":null,"attributes":[{"value":"/ More pre-context is needed. The caller should call `provide_context`","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10635,"byte_end":10707,"line_start":233,"line_end":233,"column_start":5,"column_end":77}},{"value":"/ with a chunk ending at the offset given, then retry the query. This","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10712,"byte_end":10783,"line_start":234,"line_end":234,"column_start":5,"column_end":76}},{"value":"/ will only be returned if the `chunk_start` parameter is nonzero.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10788,"byte_end":10856,"line_start":235,"line_end":235,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":177},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11113,"byte_end":11122,"line_start":241,"line_end":241,"column_start":5,"column_end":14},"name":"PrevChunk","qualname":"::grapheme::GraphemeIncomplete::PrevChunk","value":"GraphemeIncomplete::PrevChunk","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" When requesting `prev_boundary`, the cursor is moving past the beginning\n of the current chunk, so the chunk before that is requested. This will\n only be returned if the `chunk_start` parameter is nonzero.\n","sig":null,"attributes":[{"value":"/ When requesting `prev_boundary`, the cursor is moving past the beginning","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10885,"byte_end":10961,"line_start":238,"line_end":238,"column_start":5,"column_end":81}},{"value":"/ of the current chunk, so the chunk before that is requested. This will","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10966,"byte_end":11040,"line_start":239,"line_end":239,"column_start":5,"column_end":79}},{"value":"/ only be returned if the `chunk_start` parameter is nonzero.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11045,"byte_end":11108,"line_start":240,"line_end":240,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":179},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11396,"byte_end":11405,"line_start":247,"line_end":247,"column_start":5,"column_end":14},"name":"NextChunk","qualname":"::grapheme::GraphemeIncomplete::NextChunk","value":"GraphemeIncomplete::NextChunk","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" When requesting `next_boundary`, the cursor is moving past the end of the\n current chunk, so the chunk after that is requested. This will only be\n returned if the chunk ends before the `len` parameter provided on\n creation of the cursor.\n","sig":null,"attributes":[{"value":"/ When requesting `next_boundary`, the cursor is moving past the end of the","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11129,"byte_end":11206,"line_start":243,"line_end":243,"column_start":5,"column_end":82}},{"value":"/ current chunk, so the chunk after that is requested. This will only be","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11211,"byte_end":11285,"line_start":244,"line_end":244,"column_start":5,"column_end":79}},{"value":"/ returned if the chunk ends before the `len` parameter provided on","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11290,"byte_end":11359,"line_start":245,"line_end":245,"column_start":5,"column_end":74}},{"value":"/ creation of the cursor.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11364,"byte_end":11391,"line_start":246,"line_end":246,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":181},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11541,"byte_end":11554,"line_start":250,"line_end":250,"column_start":5,"column_end":18},"name":"InvalidOffset","qualname":"::grapheme::GraphemeIncomplete::InvalidOffset","value":"GraphemeIncomplete::InvalidOffset","parent":{"krate":0,"index":173},"children":[],"decl_id":null,"docs":" An error returned when the chunk given does not contain the cursor position.\n","sig":null,"attributes":[{"value":"/ An error returned when the chunk given does not contain the cursor position.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":11456,"byte_end":11536,"line_start":249,"line_end":249,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":173},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10610,"byte_end":10628,"line_start":232,"line_end":232,"column_start":10,"column_end":28},"name":"GraphemeIncomplete","qualname":"::grapheme::GraphemeIncomplete","value":"pub enum GraphemeIncomplete {\n\n    /// More pre-context is needed. The caller should call `provide_context`\n    /// with a chunk ending at the offset given, then retry the query. This\n    /// will only be returned if the `chunk_start` parameter is nonzero.\n    PreContext(usize),\n\n    /// When requesting `prev_boundary`, the cursor is moving past the beginning\n    /// of the current chunk, so the chunk before that is requested. This will\n    /// only be returned if the `chunk_start` parameter is nonzero.\n    PrevChunk,\n\n    /// When requesting `next_boundary`, the cursor is moving past the end of the\n    /// current chunk, so the chunk after that is requested. This will only be\n    /// returned if the chunk ends before the `len` parameter provided on\n    /// creation of the cursor.\n    NextChunk,\n\n    /// An error returned when the chunk given does not contain the cursor position.\n    InvalidOffset,\n}","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181}],"decl_id":null,"docs":" An error return indicating that not enough content was available in the\n provided chunk to satisfy the query, and that more content must be provided.\n","sig":null,"attributes":[{"value":"/ An error return indicating that not enough content was available in the","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10412,"byte_end":10487,"line_start":229,"line_end":229,"column_start":1,"column_end":76}},{"value":"/ provided chunk to satisfy the query, and that more content must be provided.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":10488,"byte_end":10568,"line_start":230,"line_end":230,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14638,"byte_end":14641,"line_start":334,"line_end":334,"column_start":12,"column_end":15},"name":"new","qualname":"<GraphemeCursor>::new","value":"pub fn new(usize, usize) -> GraphemeCursor","parent":null,"children":[],"decl_id":null,"docs":" Create a new cursor. The string and initial offset are given at creation\n time, but the contents of the string are not.","sig":null,"attributes":[{"value":"/ Create a new cursor. The string and initial offset are given at creation","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14170,"byte_end":14246,"line_start":323,"line_end":323,"column_start":5,"column_end":81}},{"value":"/ time, but the contents of the string are not.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14251,"byte_end":14300,"line_start":324,"line_end":324,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14305,"byte_end":14308,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ The `offset` parameter must be on a codepoint boundary.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14313,"byte_end":14372,"line_start":326,"line_end":326,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14377,"byte_end":14380,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14385,"byte_end":14396,"line_start":328,"line_end":328,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::GraphemeCursor;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14401,"byte_end":14440,"line_start":329,"line_end":329,"column_start":5,"column_end":44}},{"value":"/ let s = \"हिन्दी\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14445,"byte_end":14478,"line_start":330,"line_end":330,"column_start":5,"column_end":26}},{"value":"/ let mut extended = GraphemeCursor::new(0, s.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14483,"byte_end":14538,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(extended.next_boundary(s, 0), Ok(Some(\"हि\".len())));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14543,"byte_end":14614,"line_start":332,"line_end":332,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14619,"byte_end":14626,"line_start":333,"line_end":333,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15615,"byte_end":15625,"line_start":364,"line_end":364,"column_start":12,"column_end":22},"name":"new_legacy","qualname":"<GraphemeCursor>::new_legacy","value":"pub fn new_legacy(usize, usize) -> GraphemeCursor","parent":null,"children":[],"decl_id":null,"docs":" Create a new cursor. The string and initial offset are given at creation\n time, but the contents of the string are not.","sig":null,"attributes":[{"value":"/ Create a new cursor. The string and initial offset are given at creation","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15147,"byte_end":15223,"line_start":353,"line_end":353,"column_start":5,"column_end":81}},{"value":"/ time, but the contents of the string are not.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15228,"byte_end":15277,"line_start":354,"line_end":354,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15282,"byte_end":15285,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ The `offset` parameter must be on a codepoint boundary.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15290,"byte_end":15349,"line_start":356,"line_end":356,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15354,"byte_end":15357,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15362,"byte_end":15373,"line_start":358,"line_end":358,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::GraphemeCursor;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15378,"byte_end":15417,"line_start":359,"line_end":359,"column_start":5,"column_end":44}},{"value":"/ let s = \"हिन्दी\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15422,"byte_end":15455,"line_start":360,"line_end":360,"column_start":5,"column_end":26}},{"value":"/ let mut legacy = GraphemeCursor::new_legacy(0, s.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15460,"byte_end":15520,"line_start":361,"line_end":361,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(legacy.next_boundary(s, 0), Ok(Some(\"ह\".len())));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15525,"byte_end":15591,"line_start":362,"line_end":362,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":15596,"byte_end":15603,"line_start":363,"line_end":363,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16561,"byte_end":16571,"line_start":394,"line_end":394,"column_start":12,"column_end":22},"name":"set_cursor","qualname":"<GraphemeCursor>::set_cursor","value":"pub fn set_cursor(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the cursor to a new location in the same string.","sig":null,"attributes":[{"value":"/ Set the cursor to a new location in the same string.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16213,"byte_end":16269,"line_start":384,"line_end":384,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16274,"byte_end":16277,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16282,"byte_end":16293,"line_start":386,"line_end":386,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::GraphemeCursor;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16298,"byte_end":16337,"line_start":387,"line_end":387,"column_start":5,"column_end":44}},{"value":"/ let s = \"abcd\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16342,"byte_end":16361,"line_start":388,"line_end":388,"column_start":5,"column_end":24}},{"value":"/ let mut cursor = GraphemeCursor::new(0, s.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16366,"byte_end":16419,"line_start":389,"line_end":389,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(cursor.cur_cursor(), 0);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16424,"byte_end":16463,"line_start":390,"line_end":390,"column_start":5,"column_end":44}},{"value":"/ cursor.set_cursor(2);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16468,"byte_end":16493,"line_start":391,"line_end":391,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(cursor.cur_cursor(), 2);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16498,"byte_end":16537,"line_start":392,"line_end":392,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":16542,"byte_end":16549,"line_start":393,"line_end":393,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17666,"byte_end":17676,"line_start":422,"line_end":422,"column_start":12,"column_end":22},"name":"cur_cursor","qualname":"<GraphemeCursor>::cur_cursor","value":"pub fn cur_cursor(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The current offset of the cursor. Equal to the last value provided to\n `new()` or `set_cursor()`, or returned from `next_boundary()` or\n `prev_boundary()`.","sig":null,"attributes":[{"value":"/ The current offset of the cursor. Equal to the last value provided to","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17031,"byte_end":17104,"line_start":409,"line_end":409,"column_start":5,"column_end":78}},{"value":"/ `new()` or `set_cursor()`, or returned from `next_boundary()` or","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17109,"byte_end":17177,"line_start":410,"line_end":410,"column_start":5,"column_end":73}},{"value":"/ `prev_boundary()`.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17182,"byte_end":17204,"line_start":411,"line_end":411,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17209,"byte_end":17212,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17217,"byte_end":17228,"line_start":413,"line_end":413,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::GraphemeCursor;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17233,"byte_end":17272,"line_start":414,"line_end":414,"column_start":5,"column_end":44}},{"value":"/ // Two flags (🇷🇸🇮🇴), each flag is two RIS codepoints, each RIS is 4 bytes.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17277,"byte_end":17367,"line_start":415,"line_end":415,"column_start":5,"column_end":83}},{"value":"/ let flags = \"\\u{1F1F7}\\u{1F1F8}\\u{1F1EE}\\u{1F1F4}\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17372,"byte_end":17427,"line_start":416,"line_end":416,"column_start":5,"column_end":60}},{"value":"/ let mut cursor = GraphemeCursor::new(4, flags.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17432,"byte_end":17489,"line_start":417,"line_end":417,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(cursor.cur_cursor(), 4);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17494,"byte_end":17533,"line_start":418,"line_end":418,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(cursor.next_boundary(flags, 0), Ok(Some(8)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17538,"byte_end":17598,"line_start":419,"line_end":419,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(cursor.cur_cursor(), 8);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17603,"byte_end":17642,"line_start":420,"line_end":420,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17647,"byte_end":17654,"line_start":421,"line_end":421,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18902,"byte_end":18917,"line_start":450,"line_end":450,"column_start":12,"column_end":27},"name":"provide_context","qualname":"<GraphemeCursor>::provide_context","value":"pub fn provide_context(&mut Self, &str, usize)","parent":null,"children":[],"decl_id":null,"docs":" Provide additional pre-context when it is needed to decide a boundary.\n The end of the chunk must coincide with the value given in the\n `GraphemeIncomplete::PreContext` request.","sig":null,"attributes":[{"value":"/ Provide additional pre-context when it is needed to decide a boundary.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17726,"byte_end":17800,"line_start":426,"line_end":426,"column_start":5,"column_end":79}},{"value":"/ The end of the chunk must coincide with the value given in the","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17805,"byte_end":17871,"line_start":427,"line_end":427,"column_start":5,"column_end":71}},{"value":"/ `GraphemeIncomplete::PreContext` request.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17876,"byte_end":17921,"line_start":428,"line_end":428,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17926,"byte_end":17929,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17934,"byte_end":17945,"line_start":430,"line_end":430,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::{GraphemeCursor, GraphemeIncomplete};","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":17950,"byte_end":18011,"line_start":431,"line_end":431,"column_start":5,"column_end":66}},{"value":"/ let flags = \"\\u{1F1F7}\\u{1F1F8}\\u{1F1EE}\\u{1F1F4}\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18016,"byte_end":18071,"line_start":432,"line_end":432,"column_start":5,"column_end":60}},{"value":"/ let mut cursor = GraphemeCursor::new(8, flags.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18076,"byte_end":18133,"line_start":433,"line_end":433,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18138,"byte_end":18141,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ // Not enough pre-context to decide if there's a boundary between the two flags.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18146,"byte_end":18230,"line_start":435,"line_end":435,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(cursor.is_boundary(&flags[8..], 8), Err(GraphemeIncomplete::PreContext(8)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18235,"byte_end":18326,"line_start":436,"line_end":436,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18331,"byte_end":18334,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ // Provide one more Regional Indicator Symbol of pre-context","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18339,"byte_end":18403,"line_start":438,"line_end":438,"column_start":5,"column_end":69}},{"value":"/ cursor.provide_context(&flags[4..8], 4);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18408,"byte_end":18452,"line_start":439,"line_end":439,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18457,"byte_end":18460,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ // Still not enough context to decide.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18465,"byte_end":18507,"line_start":441,"line_end":441,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(cursor.is_boundary(&flags[8..], 8), Err(GraphemeIncomplete::PreContext(4)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18512,"byte_end":18603,"line_start":442,"line_end":442,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18608,"byte_end":18611,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ // Provide additional requested context.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18616,"byte_end":18660,"line_start":444,"line_end":444,"column_start":5,"column_end":49}},{"value":"/ cursor.provide_context(&flags[0..4], 0);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18665,"byte_end":18709,"line_start":445,"line_end":445,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18714,"byte_end":18717,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ // That's enough to decide (it always is when context goes to the start of the string)","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18722,"byte_end":18812,"line_start":447,"line_end":447,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(cursor.is_boundary(&flags[8..], 8), Ok(true));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18817,"byte_end":18878,"line_start":448,"line_end":448,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":18883,"byte_end":18890,"line_start":449,"line_end":449,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22792,"byte_end":22803,"line_start":554,"line_end":554,"column_start":12,"column_end":23},"name":"is_boundary","qualname":"<GraphemeCursor>::is_boundary","value":"pub fn is_boundary(&mut Self, &str, usize) -> Result<bool, GraphemeIncomplete>","parent":null,"children":[],"decl_id":null,"docs":" Determine whether the current cursor location is a grapheme cluster boundary.\n Only a part of the string need be supplied. If `chunk_start` is nonzero or\n the length of `chunk` is not equal to `len` on creation, then this method\n may return `GraphemeIncomplete::PreContext`. The caller should then\n call `provide_context` with the requested chunk, then retry calling this\n method.","sig":null,"attributes":[{"value":"/ Determine whether the current cursor location is a grapheme cluster boundary.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":21563,"byte_end":21644,"line_start":531,"line_end":531,"column_start":5,"column_end":86}},{"value":"/ Only a part of the string need be supplied. If `chunk_start` is nonzero or","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":21649,"byte_end":21727,"line_start":532,"line_end":532,"column_start":5,"column_end":83}},{"value":"/ the length of `chunk` is not equal to `len` on creation, then this method","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":21732,"byte_end":21809,"line_start":533,"line_end":533,"column_start":5,"column_end":82}},{"value":"/ may return `GraphemeIncomplete::PreContext`. The caller should then","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":21814,"byte_end":21885,"line_start":534,"line_end":534,"column_start":5,"column_end":76}},{"value":"/ call `provide_context` with the requested chunk, then retry calling this","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":21890,"byte_end":21966,"line_start":535,"line_end":535,"column_start":5,"column_end":81}},{"value":"/ method.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":21971,"byte_end":21982,"line_start":536,"line_end":536,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":21987,"byte_end":21990,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ For partial chunks, if the cursor is not at the beginning or end of the","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":21995,"byte_end":22070,"line_start":538,"line_end":538,"column_start":5,"column_end":80}},{"value":"/ string, the chunk should contain at least the codepoint following the cursor.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22075,"byte_end":22156,"line_start":539,"line_end":539,"column_start":5,"column_end":86}},{"value":"/ If the string is nonempty, the chunk must be nonempty.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22161,"byte_end":22219,"line_start":540,"line_end":540,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22224,"byte_end":22227,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ All calls should have consistent chunk contents (ie, if a chunk provides","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22232,"byte_end":22308,"line_start":542,"line_end":542,"column_start":5,"column_end":81}},{"value":"/ content for a given slice, all further chunks covering that slice must have","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22313,"byte_end":22392,"line_start":543,"line_end":543,"column_start":5,"column_end":84}},{"value":"/ the same content for it).","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22397,"byte_end":22426,"line_start":544,"line_end":544,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22431,"byte_end":22434,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22439,"byte_end":22450,"line_start":546,"line_end":546,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::GraphemeCursor;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22455,"byte_end":22494,"line_start":547,"line_end":547,"column_start":5,"column_end":44}},{"value":"/ let flags = \"\\u{1F1F7}\\u{1F1F8}\\u{1F1EE}\\u{1F1F4}\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22499,"byte_end":22554,"line_start":548,"line_end":548,"column_start":5,"column_end":60}},{"value":"/ let mut cursor = GraphemeCursor::new(8, flags.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22559,"byte_end":22616,"line_start":549,"line_end":549,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(cursor.is_boundary(flags, 0), Ok(true));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22621,"byte_end":22676,"line_start":550,"line_end":550,"column_start":5,"column_end":60}},{"value":"/ cursor.set_cursor(12);","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22681,"byte_end":22707,"line_start":551,"line_end":551,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(cursor.is_boundary(flags, 0), Ok(false));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22712,"byte_end":22768,"line_start":552,"line_end":552,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":22773,"byte_end":22780,"line_start":553,"line_end":553,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26934,"byte_end":26947,"line_start":647,"line_end":647,"column_start":12,"column_end":25},"name":"next_boundary","qualname":"<GraphemeCursor>::next_boundary","value":"pub fn next_boundary(&mut Self, &str, usize)\n-> Result<Option<usize>, GraphemeIncomplete>","parent":null,"children":[],"decl_id":null,"docs":" Find the next boundary after the current cursor position. Only a part of\n the string need be supplied. If the chunk is incomplete, then this\n method might return `GraphemeIncomplete::PreContext` or\n `GraphemeIncomplete::NextChunk`. In the former case, the caller should\n call `provide_context` with the requested chunk, then retry. In the\n latter case, the caller should provide the chunk following the one\n given, then retry.","sig":null,"attributes":[{"value":"/ Find the next boundary after the current cursor position. Only a part of","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25313,"byte_end":25389,"line_start":615,"line_end":615,"column_start":5,"column_end":81}},{"value":"/ the string need be supplied. If the chunk is incomplete, then this","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25394,"byte_end":25464,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/ method might return `GraphemeIncomplete::PreContext` or","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25469,"byte_end":25528,"line_start":617,"line_end":617,"column_start":5,"column_end":64}},{"value":"/ `GraphemeIncomplete::NextChunk`. In the former case, the caller should","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25533,"byte_end":25607,"line_start":618,"line_end":618,"column_start":5,"column_end":79}},{"value":"/ call `provide_context` with the requested chunk, then retry. In the","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25612,"byte_end":25683,"line_start":619,"line_end":619,"column_start":5,"column_end":76}},{"value":"/ latter case, the caller should provide the chunk following the one","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25688,"byte_end":25758,"line_start":620,"line_end":620,"column_start":5,"column_end":75}},{"value":"/ given, then retry.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25763,"byte_end":25785,"line_start":621,"line_end":621,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25790,"byte_end":25793,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ See `is_boundary` for expectations on the provided chunk.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25798,"byte_end":25859,"line_start":623,"line_end":623,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25864,"byte_end":25867,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25872,"byte_end":25883,"line_start":625,"line_end":625,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::GraphemeCursor;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25888,"byte_end":25927,"line_start":626,"line_end":626,"column_start":5,"column_end":44}},{"value":"/ let flags = \"\\u{1F1F7}\\u{1F1F8}\\u{1F1EE}\\u{1F1F4}\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25932,"byte_end":25987,"line_start":627,"line_end":627,"column_start":5,"column_end":60}},{"value":"/ let mut cursor = GraphemeCursor::new(4, flags.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":25992,"byte_end":26049,"line_start":628,"line_end":628,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(cursor.next_boundary(flags, 0), Ok(Some(8)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26054,"byte_end":26114,"line_start":629,"line_end":629,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(cursor.next_boundary(flags, 0), Ok(Some(16)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26119,"byte_end":26180,"line_start":630,"line_end":630,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(cursor.next_boundary(flags, 0), Ok(None));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26185,"byte_end":26242,"line_start":631,"line_end":631,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26247,"byte_end":26254,"line_start":632,"line_end":632,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26259,"byte_end":26262,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ And an example that uses partial strings:","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26267,"byte_end":26312,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26317,"byte_end":26320,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26325,"byte_end":26336,"line_start":636,"line_end":636,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::{GraphemeCursor, GraphemeIncomplete};","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26341,"byte_end":26402,"line_start":637,"line_end":637,"column_start":5,"column_end":66}},{"value":"/ let s = \"abcd\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26407,"byte_end":26426,"line_start":638,"line_end":638,"column_start":5,"column_end":24}},{"value":"/ let mut cursor = GraphemeCursor::new(0, s.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26431,"byte_end":26484,"line_start":639,"line_end":639,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(cursor.next_boundary(&s[..2], 0), Ok(Some(1)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26489,"byte_end":26551,"line_start":640,"line_end":640,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(cursor.next_boundary(&s[..2], 0), Err(GraphemeIncomplete::NextChunk));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26556,"byte_end":26641,"line_start":641,"line_end":641,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(cursor.next_boundary(&s[2..4], 2), Ok(Some(2)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26646,"byte_end":26709,"line_start":642,"line_end":642,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(cursor.next_boundary(&s[2..4], 2), Ok(Some(3)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26714,"byte_end":26777,"line_start":643,"line_end":643,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(cursor.next_boundary(&s[2..4], 2), Ok(Some(4)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26782,"byte_end":26845,"line_start":644,"line_end":644,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(cursor.next_boundary(&s[2..4], 2), Ok(None));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26850,"byte_end":26910,"line_start":645,"line_end":645,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":26915,"byte_end":26922,"line_start":646,"line_end":646,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":30316,"byte_end":30329,"line_start":726,"line_end":726,"column_start":12,"column_end":25},"name":"prev_boundary","qualname":"<GraphemeCursor>::prev_boundary","value":"pub fn prev_boundary(&mut Self, &str, usize)\n-> Result<Option<usize>, GraphemeIncomplete>","parent":null,"children":[],"decl_id":null,"docs":" Find the previous boundary after the current cursor position. Only a part\n of the string need be supplied. If the chunk is incomplete, then this\n method might return `GraphemeIncomplete::PreContext` or\n `GraphemeIncomplete::PrevChunk`. In the former case, the caller should\n call `provide_context` with the requested chunk, then retry. In the\n latter case, the caller should provide the chunk preceding the one\n given, then retry.","sig":null,"attributes":[{"value":"/ Find the previous boundary after the current cursor position. Only a part","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":28587,"byte_end":28664,"line_start":693,"line_end":693,"column_start":5,"column_end":82}},{"value":"/ of the string need be supplied. If the chunk is incomplete, then this","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":28669,"byte_end":28742,"line_start":694,"line_end":694,"column_start":5,"column_end":78}},{"value":"/ method might return `GraphemeIncomplete::PreContext` or","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":28747,"byte_end":28806,"line_start":695,"line_end":695,"column_start":5,"column_end":64}},{"value":"/ `GraphemeIncomplete::PrevChunk`. In the former case, the caller should","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":28811,"byte_end":28885,"line_start":696,"line_end":696,"column_start":5,"column_end":79}},{"value":"/ call `provide_context` with the requested chunk, then retry. In the","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":28890,"byte_end":28961,"line_start":697,"line_end":697,"column_start":5,"column_end":76}},{"value":"/ latter case, the caller should provide the chunk preceding the one","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":28966,"byte_end":29036,"line_start":698,"line_end":698,"column_start":5,"column_end":75}},{"value":"/ given, then retry.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29041,"byte_end":29063,"line_start":699,"line_end":699,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29068,"byte_end":29071,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ See `is_boundary` for expectations on the provided chunk.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29076,"byte_end":29137,"line_start":701,"line_end":701,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29142,"byte_end":29145,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29150,"byte_end":29161,"line_start":703,"line_end":703,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::GraphemeCursor;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29166,"byte_end":29205,"line_start":704,"line_end":704,"column_start":5,"column_end":44}},{"value":"/ let flags = \"\\u{1F1F7}\\u{1F1F8}\\u{1F1EE}\\u{1F1F4}\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29210,"byte_end":29265,"line_start":705,"line_end":705,"column_start":5,"column_end":60}},{"value":"/ let mut cursor = GraphemeCursor::new(12, flags.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29270,"byte_end":29328,"line_start":706,"line_end":706,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(cursor.prev_boundary(flags, 0), Ok(Some(8)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29333,"byte_end":29393,"line_start":707,"line_end":707,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(cursor.prev_boundary(flags, 0), Ok(Some(0)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29398,"byte_end":29458,"line_start":708,"line_end":708,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(cursor.prev_boundary(flags, 0), Ok(None));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29463,"byte_end":29520,"line_start":709,"line_end":709,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29525,"byte_end":29532,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29537,"byte_end":29540,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ And an example that uses partial strings (note the exact return is not","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29545,"byte_end":29619,"line_start":712,"line_end":712,"column_start":5,"column_end":79}},{"value":"/ guaranteed, and may be `PrevChunk` or `PreContext` arbitrarily):","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29624,"byte_end":29692,"line_start":713,"line_end":713,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29697,"byte_end":29700,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29705,"byte_end":29716,"line_start":715,"line_end":715,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::{GraphemeCursor, GraphemeIncomplete};","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29721,"byte_end":29782,"line_start":716,"line_end":716,"column_start":5,"column_end":66}},{"value":"/ let s = \"abcd\";","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29787,"byte_end":29806,"line_start":717,"line_end":717,"column_start":5,"column_end":24}},{"value":"/ let mut cursor = GraphemeCursor::new(4, s.len());","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29811,"byte_end":29864,"line_start":718,"line_end":718,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(cursor.prev_boundary(&s[2..4], 2), Ok(Some(3)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29869,"byte_end":29932,"line_start":719,"line_end":719,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(cursor.prev_boundary(&s[2..4], 2), Err(GraphemeIncomplete::PrevChunk));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":29937,"byte_end":30023,"line_start":720,"line_end":720,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(cursor.prev_boundary(&s[0..2], 0), Ok(Some(2)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":30028,"byte_end":30091,"line_start":721,"line_end":721,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(cursor.prev_boundary(&s[0..2], 0), Ok(Some(1)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":30096,"byte_end":30159,"line_start":722,"line_end":722,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(cursor.prev_boundary(&s[0..2], 0), Ok(Some(0)));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":30164,"byte_end":30227,"line_start":723,"line_end":723,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(cursor.prev_boundary(&s[0..2], 0), Ok(None));","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":30232,"byte_end":30292,"line_start":724,"line_end":724,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":30297,"byte_end":30304,"line_start":725,"line_end":725,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":74},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34521,"byte_end":34526,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"Words","qualname":"::word::Words","value":"Words {  }","parent":null,"children":[{"krate":0,"index":76}],"decl_id":null,"docs":" An iterator over the substrings of a string which, after splitting the string on [word\n boundaries](https://www.unicode.org/reports/tr29/#Word_Boundaries), contain any characters with\n the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with\n [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).\n","sig":null,"attributes":[{"value":"/ An iterator over the substrings of a string which, after splitting the string on [word","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34146,"byte_end":34236,"line_start":23,"line_end":23,"column_start":1,"column_end":91}},{"value":"/ boundaries](https://www.unicode.org/reports/tr29/#Word_Boundaries), contain any characters with","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34237,"byte_end":34336,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ the [Alphabetic](http://unicode.org/reports/tr44/#Alphabetic) property, or with","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34337,"byte_end":34420,"line_start":25,"line_end":25,"column_start":1,"column_end":84}},{"value":"/ [General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34421,"byte_end":34509,"line_start":26,"line_end":26,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34978,"byte_end":34981,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Words>::new","value":"pub fn new<'b>(&'b str, fn(: &&str) -> bool) -> Words","parent":null,"children":[],"decl_id":null,"docs":" Create new iterator for *words*.\n","sig":null,"attributes":[{"value":"/ Create new iterator for *words*.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34916,"byte_end":34952,"line_start":48,"line_end":48,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34957,"byte_end":34966,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":209},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35272,"byte_end":35282,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"WordBounds","qualname":"::word::WordBounds","value":"WordBounds {  }","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213}],"decl_id":null,"docs":" External iterator for a string's\n [word boundaries](https://www.unicode.org/reports/tr29/#Word_Boundaries).\n","sig":null,"attributes":[{"value":"/ External iterator for a string's","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35129,"byte_end":35165,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ [word boundaries](https://www.unicode.org/reports/tr29/#Word_Boundaries).","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35166,"byte_end":35243,"line_start":58,"line_end":58,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":217},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35444,"byte_end":35460,"line_start":68,"line_end":68,"column_start":12,"column_end":28},"name":"WordBoundIndices","qualname":"::word::WordBoundIndices","value":"WordBoundIndices {  }","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220}],"decl_id":null,"docs":" External iterator for word boundaries and byte offsets.\n","sig":null,"attributes":[{"value":"/ External iterator for word boundaries and byte offsets.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35356,"byte_end":35415,"line_start":66,"line_end":66,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35646,"byte_end":35649,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<WordBoundIndices>::new","value":"pub fn new<'b>(&'b str) -> WordBoundIndices","parent":null,"children":[],"decl_id":null,"docs":" Create new iterator for *word boundries and their indices*.\n","sig":null,"attributes":[{"value":"/ Create new iterator for *word boundries and their indices*.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35557,"byte_end":35620,"line_start":74,"line_end":74,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35625,"byte_end":35634,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36284,"byte_end":36290,"line_start":97,"line_end":97,"column_start":12,"column_end":18},"name":"as_str","qualname":"<WordBoundIndices>::as_str","value":"pub fn as_str(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data (the part yet to be iterated) as a slice of the original string.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35825,"byte_end":35834,"line_start":83,"line_end":83,"column_start":5,"column_end":14}},{"value":"/ View the underlying data (the part yet to be iterated) as a slice of the original string.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35839,"byte_end":35932,"line_start":84,"line_end":84,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35937,"byte_end":35940,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35945,"byte_end":35956,"line_start":86,"line_end":86,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::WordBoundIndices;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35961,"byte_end":36002,"line_start":87,"line_end":87,"column_start":5,"column_end":46}},{"value":"/ let mut iter = WordBoundIndices::new(\"Hello world\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36007,"byte_end":36063,"line_start":88,"line_end":88,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(iter.as_str(), \"Hello world\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36068,"byte_end":36113,"line_start":89,"line_end":89,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36118,"byte_end":36121,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36126,"byte_end":36142,"line_start":91,"line_end":91,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(iter.as_str(), \" world\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36147,"byte_end":36187,"line_start":92,"line_end":92,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36192,"byte_end":36195,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36200,"byte_end":36216,"line_start":94,"line_end":94,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(iter.as_str(), \"world\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36221,"byte_end":36260,"line_start":95,"line_end":95,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36265,"byte_end":36272,"line_start":96,"line_end":96,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57301,"byte_end":57304,"line_start":628,"line_end":628,"column_start":12,"column_end":15},"name":"new","qualname":"<WordBounds>::new","value":"pub fn new(&str) -> WordBounds","parent":null,"children":[],"decl_id":null,"docs":" Create new iterator for *word boundries*.\n","sig":null,"attributes":[{"value":"/ Create new iterator for *word boundries*.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57230,"byte_end":57275,"line_start":626,"line_end":626,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57280,"byte_end":57289,"line_start":627,"line_end":627,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57889,"byte_end":57895,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_str","qualname":"<WordBounds>::as_str","value":"pub fn as_str(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data (the part yet to be iterated) as a slice of the original string.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57442,"byte_end":57451,"line_start":636,"line_end":636,"column_start":5,"column_end":14}},{"value":"/ View the underlying data (the part yet to be iterated) as a slice of the original string.","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57456,"byte_end":57549,"line_start":637,"line_end":637,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57554,"byte_end":57557,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57562,"byte_end":57573,"line_start":639,"line_end":639,"column_start":5,"column_end":16}},{"value":"/ # use unic_segment::WordBounds;","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57578,"byte_end":57613,"line_start":640,"line_end":640,"column_start":5,"column_end":40}},{"value":"/ let mut iter = WordBounds::new(\"Hello world\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57618,"byte_end":57668,"line_start":641,"line_end":641,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(iter.as_str(), \"Hello world\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57673,"byte_end":57718,"line_start":642,"line_end":642,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57723,"byte_end":57726,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57731,"byte_end":57747,"line_start":644,"line_end":644,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(iter.as_str(), \" world\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57752,"byte_end":57792,"line_start":645,"line_end":645,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57797,"byte_end":57800,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ iter.next();","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57805,"byte_end":57821,"line_start":647,"line_end":647,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(iter.as_str(), \"world\");","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57826,"byte_end":57865,"line_start":648,"line_end":648,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57870,"byte_end":57877,"line_start":649,"line_end":649,"column_start":5,"column_end":12}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4457,"byte_end":4472,"line_start":29,"line_end":29,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5535,"byte_end":5550,"line_start":66,"line_end":66,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5909,"byte_end":5924,"line_start":82,"line_end":82,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6389,"byte_end":6398,"line_start":100,"line_end":100,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7625,"byte_end":7634,"line_start":141,"line_end":141,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":8210,"byte_end":8219,"line_start":161,"line_end":161,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14149,"byte_end":14163,"line_start":322,"line_end":322,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34612,"byte_end":34617,"line_start":31,"line_end":31,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34776,"byte_end":34781,"line_start":40,"line_end":40,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34900,"byte_end":34905,"line_start":47,"line_end":47,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35530,"byte_end":35546,"line_start":73,"line_end":73,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36369,"byte_end":36385,"line_start":102,"line_end":102,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36744,"byte_end":36760,"line_start":118,"line_end":118,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":37595,"byte_end":37605,"line_start":160,"line_end":160,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":47888,"byte_end":47898,"line_start":400,"line_end":400,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57209,"byte_end":57219,"line_start":625,"line_end":625,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":4457,"byte_end":4472,"line_start":29,"line_end":29,"column_start":10,"column_end":25},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5535,"byte_end":5550,"line_start":66,"line_end":66,"column_start":23,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":127},"to":{"krate":2,"index":5680}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":5909,"byte_end":5924,"line_start":82,"line_end":82,"column_start":34,"column_end":49},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":127},"to":{"krate":2,"index":5608}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":6389,"byte_end":6398,"line_start":100,"line_end":100,"column_start":10,"column_end":19},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":7625,"byte_end":7634,"line_start":141,"line_end":141,"column_start":23,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":134},"to":{"krate":2,"index":5680}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":8210,"byte_end":8219,"line_start":161,"line_end":161,"column_start":34,"column_end":43},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":134},"to":{"krate":2,"index":5608}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/grapheme.rs","byte_start":14149,"byte_end":14163,"line_start":322,"line_end":322,"column_start":6,"column_end":20},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34612,"byte_end":34617,"line_start":31,"line_end":31,"column_start":23,"column_end":28},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":5680}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34776,"byte_end":34781,"line_start":40,"line_end":40,"column_start":34,"column_end":39},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":74},"to":{"krate":2,"index":5608}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":34900,"byte_end":34905,"line_start":47,"line_end":47,"column_start":10,"column_end":15},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":35530,"byte_end":35546,"line_start":73,"line_end":73,"column_start":10,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36369,"byte_end":36385,"line_start":102,"line_end":102,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":217},"to":{"krate":2,"index":5680}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":36744,"byte_end":36760,"line_start":118,"line_end":118,"column_start":34,"column_end":50},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":217},"to":{"krate":2,"index":5608}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":37595,"byte_end":37605,"line_start":160,"line_end":160,"column_start":23,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":5680}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":47888,"byte_end":47898,"line_start":400,"line_end":400,"column_start":34,"column_end":44},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":5608}},{"span":{"file_name":"/home/deltalab/.cargo/registry/src/github.com-1ecc6299db9ec823/unic-segment-0.7.0/src/word.rs","byte_start":57209,"byte_end":57219,"line_start":625,"line_end":625,"column_start":10,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":209},"to":{"krate":4294967295,"index":4294967295}}]}